/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AggregatingDataSourceEditorPanel.java
 *
 * Created on Apr 22, 2009, 8:37:48 AM
 */

package org.virbo.cdf;

import gov.nasa.gsfc.voyager.cdf.CDF;
import gov.nasa.gsfc.voyager.cdf.Variable;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.autoplot.help.AutoplotHelpSystem;
import org.das2.util.DasExceptionHandler;
import org.das2.util.filesystem.FileSystem;
import org.das2.util.monitor.NullProgressMonitor;
import org.das2.util.monitor.ProgressMonitor;
import org.virbo.dataset.QDataSet;
import org.virbo.datasource.DataSetSelector;
import org.virbo.datasource.DataSetURI;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URISplit;

/**
 *
 * @author jbf
 */
public class CdfJavaDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {
    public static final String NO_PLOTTABLE_PARAMETERS_MSG = "<html><em>No plottable parameters</em></html>";

    /** the maximum number of DEPEND_1 channels where we should show option for depend_1. */
    private static final int MAX_SLICE1_OFFER = 32;

    private final static Logger logger= Logger.getLogger( "apdss.cdfj" );

    /** Creates new form AggregatingDataSourceEditorPanel */
    public CdfJavaDataSourceEditorPanel() {
        initComponents();
        AutoplotHelpSystem.getHelpSystem().registerHelpID(this, "cdf_main");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        selectVariableLabel = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        parameterTree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        subsetComboBox = new javax.swing.JComboBox();
        interpretMetadataLabel = new javax.swing.JLabel();
        noInterpMeta = new javax.swing.JCheckBox();
        noDep = new javax.swing.JCheckBox();
        showAllVarTypeCB = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        paramInfo = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(615, 452));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(615, 452));

        selectVariableLabel.setText("Select CDF Variable:");

        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane1.setDividerLocation(370);
        jSplitPane1.setResizeWeight(1.0);

        parameterTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                parameterTreeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(parameterTree);

        jSplitPane1.setLeftComponent(jScrollPane3);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Advanced"));

        jLabel4.setText("Load subset of the data:");
        jLabel4.setToolTipText("<html>Load a subset of the data records, for example:<br>[0:100]  first 100 records<br> [-100:] last 100 records<br> [::10] every tenth record<br> </html>");

        subsetComboBox.setEditable(true);
        subsetComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "::10", "0:100", "-100:", "0:10000:5" }));
        subsetComboBox.setToolTipText("<html>Load a subset of the data records, for example:<br>[0:100]  first 100 records<br> [-100:] last 100 records<br> [::10] every tenth record<br> </html>");

        interpretMetadataLabel.setText("Interpret Metadata:");

        noInterpMeta.setText("no ISTP");
        noInterpMeta.setToolTipText("Don't interpret metadata to get titles and units.");

        noDep.setText("no dependencies");
        noDep.setToolTipText("Ignore connections between variables like \"DEPEND_0\"\n");

        showAllVarTypeCB.setText("show all");
        showAllVarTypeCB.setToolTipText("show all parameters, even if ISTP VAR_TYPE is not \"data\"");
        showAllVarTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllVarTypeCBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(interpretMetadataLabel)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(noDep)
                            .add(noInterpMeta)
                            .add(showAllVarTypeCB)))
                    .add(jLabel4)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(subsetComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(subsetComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(interpretMetadataLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(noInterpMeta)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(noDep)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(showAllVarTypeCB)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel3);

        jSplitPane2.setTopComponent(jSplitPane1);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(1000, 600));

        paramInfo.setText("Variable");
        paramInfo.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        paramInfo.setMaximumSize(new java.awt.Dimension(1000, 4000));
        paramInfo.setPreferredSize(new java.awt.Dimension(600, 100));
        paramInfo.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jScrollPane2.setViewportView(paramInfo);

        jSplitPane2.setRightComponent(jScrollPane2);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(selectVariableLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .add(238, 238, 238))
            .add(jSplitPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(selectVariableLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSplitPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showAllVarTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllVarTypeCBActionPerformed
        setURI( getURI() );
    }//GEN-LAST:event_showAllVarTypeCBActionPerformed

    private void parameterTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_parameterTreeValueChanged
        TreePath tp= evt.getPath();
        parameter= String.valueOf(tp.getPathComponent(1));
        updateMetadata();
    }//GEN-LAST:event_parameterTreeValueChanged

    private void updateMetadata() {
       String longName= parameterInfo.get(parameter);
       paramInfo.setText( longName );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel interpretMetadataLabel;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JCheckBox noDep;
    private javax.swing.JCheckBox noInterpMeta;
    private javax.swing.JLabel paramInfo;
    private javax.swing.JTree parameterTree;
    private javax.swing.JLabel selectVariableLabel;
    private javax.swing.JCheckBox showAllVarTypeCB;
    private javax.swing.JComboBox subsetComboBox;
    // End of variables declaration//GEN-END:variables

    public JPanel getPanel() {
        return this;
    }


    JComponent delegateComponent = null;
    DataSetSelector delegateDataSetSelector=null;
    DataSourceEditorPanel delegateEditorPanel= null;
    URISplit split;
    /**
     * URI parameters
     */
    Map<String,String> params;

    /**
     * short descriptions of the parameters
     */
    Map<String,String> parameterDescriptions;

    /**
     * long descriptions html formatted metadata about each parameter.
     */
    Map<String,String> parameterInfo;

    String parameter;

    /**
     * can I reuse the slice?  Only if the maxRec doesn't change.
     */
    long subsetMaxRec=-1;

    File cdfFile;
    CDF cdf;
    Throwable cdfException;

    /**
     * allow more abstract sources, namely cdaweb, to turn off these controls.
     * @param v
     */
    public void setShowAdvancedSubpanel( boolean v ) {
        interpretMetadataLabel.setVisible(v);
        noDep.setVisible(v);
        noInterpMeta.setVisible(v);
        showAllVarTypeCB.setVisible(v);
    }
    
    public boolean reject( String url ) throws IOException, URISyntaxException {
        split = URISplit.parse(url);
        FileSystem fs = FileSystem.create( DataSetURI.getWebURL( DataSetURI.toUri(split.path) ).toURI() );
        if ( fs.isDirectory( split.file.substring(split.path.length()) ) ) {
            return true;
        }
        return false;
    }

    public boolean prepare( String url,  java.awt.Window parent, ProgressMonitor mon) throws Exception {
        split= URISplit.parse(url);

        cdfFile= DataSetURI.getFile( split.resourceUri.toURL(), mon );
        DataSetURI.checkLength(cdfFile);

        logger.log(Level.FINE, "opening cdf file {0}", cdfFile.toString());
        try {
            cdf = CdfJavaDataSource.getCdfFile(cdfFile.toString());
            cdfException= null;
        } catch ( Exception ex ) {
            cdfException= ex;
        } catch ( Throwable ex ) {
            cdfException= ex;
        }
        return true;
    }

    public void setURI(String url) {
        split= URISplit.parse(url);
        params= URISplit.parseParams(split.params);

        try {

            cdfFile= DataSetURI.getFile( split.resourceUri.toURL(), new NullProgressMonitor() );
            DataSetURI.checkLength(cdfFile);
            
            String fileName= cdfFile.toString();

            logger.log(Level.FINE, "opening cdf file {0}", fileName);
            if ( cdf==null && cdfException==null ) {
                try {
                    cdf = CdfJavaDataSource.getCdfFile(fileName);
                } catch (Throwable ex) {
                    throw new RuntimeException(ex);
                }
            }
    
            if ( cdfException!=null ) {
                this.selectVariableLabel.setText( " " );
                this.parameterTree.setModel( new DefaultTreeModel( new DefaultMutableTreeNode("Error") ) );
                this.paramInfo.setText( "\nUnable to read cdf file." );
                return;
            }
            
            logger.finest("inspect cdf for plottable parameters");
            
                boolean isMaster= fileName.contains("MASTERS");
                parameterDescriptions= CdfUtil.getPlottable( cdf, !this.showAllVarTypeCB.isSelected(), QDataSet.MAX_RANK, false, false );
                Map<String,String> allParameterInfo= CdfUtil.getPlottable( cdf, false, QDataSet.MAX_RANK, true, isMaster );
                Map<String,String> dataParameterInfo= CdfUtil.getPlottable( cdf, true, QDataSet.MAX_RANK, true, isMaster );
                String label;
                if ( this.showAllVarTypeCB.isSelected() ) {
                    parameterInfo= allParameterInfo;
                    label= "Select CDF Variable (%d data, %d support):";
                } else {
                    parameterInfo= dataParameterInfo;
                    label= "Select CDF Variable (%d data, %d support not shown):";
                }
                int numData= dataParameterInfo.size();
                int numSupport= allParameterInfo.size() - numData;

                this.selectVariableLabel.setText( String.format( label, numData, numSupport ) );
                this.selectVariableLabel.setToolTipText("ISTP metadata marks parameters as data or support_data");

            String param= params.get("arg_0");
            String subset= null;
            if ( param!=null ) {
                int i= param.indexOf("[");
                if ( i!=-1 ) {
                    subset= param.substring(i);
                    param= param.substring(0,i);
                }
            }

            String slice1= params.remove("slice1");

            fillTree( this.parameterTree, parameterDescriptions, cdf, param, slice1 );

            logger.finest("close cdf");

            DefaultComboBoxModel cbmodel= new DefaultComboBoxModel();
            for ( String p: parameterDescriptions.keySet() ) {
                cbmodel.addElement(p);
            }

            if ( param!=null ) {
                if ( subset!=null ) {
                    subsetComboBox.setSelectedItem( subset );
                } else {
                    subsetComboBox.setSelectedItem("");
                }
            } else {
                    parameter= parameterDescriptions.entrySet().iterator().next().getKey();
                    subsetComboBox.setSelectedItem("");
                    param= parameter;
                }
            parameter= param.replaceAll("%3D", "=");

            if ( "no".equals( params.get("interpMeta")) ) {
                noInterpMeta.setSelected(true);
            }

            if ( "no".equals( params.get("doDep" ) ) ) {
                noDep.setSelected(true);
            }

        } catch (IOException ex) {
            DasExceptionHandler.handle( ex );
            Logger.getLogger(CdfJavaDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            DasExceptionHandler.handle( ex );
            Logger.getLogger(CdfJavaDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            DasExceptionHandler.handle( ex );
            Logger.getLogger(CdfJavaDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public String getURI() {
        String slice= subsetComboBox.getSelectedItem().toString().trim();
        if ( slice.length()>0 && slice.charAt(0)!='[' ) {
            slice= "["+slice+"]";
        }

        TreePath treePath= parameterTree.getSelectionPath();
        if ( treePath==null ) {
            logger.fine("param was null");
        } else if ( treePath.getPathCount()==3 ) {
            String p= String.valueOf( treePath.getPathComponent(1) );
            p= p.replaceAll("=", "%3D");
            params.put( "arg_0", p + ( slice==null ? "" : slice ) );
            String val=  String.valueOf( treePath.getPathComponent(2) );
            int idx= val.indexOf(":");
            params.put( "slice1", val.substring(0,idx).trim() );
        } else {
            String p= String.valueOf( treePath.getPathComponent(1) );
            p= p.replaceAll("=", "%3D");
            params.put( "arg_0", p + ( slice==null ? "" : slice ) );
        }

        if ( noDep.isSelected() ) {
            params.put("doDep","no");
        } else {
            params.remove("doDep");
        }
        if ( noInterpMeta.isSelected() ) {
            params.put("interpMeta", "no");
        } else {
            params.remove("interpMeta");
        }
        
        split.params= URISplit.formatParams(params);
        return URISplit.format(split);
    }

    public void markProblems(List<String> problems) {
        
    }

    private void fillTree( JTree parameterTree, Map<String,String> mm, CDF cdf, String param, String slice1 ) {

        DefaultMutableTreeNode root= new DefaultMutableTreeNode("");

        TreePath selection=null;
        for ( Entry<String,String> e: mm.entrySet() ) {

           try {
                Variable v= cdf.getVariable(e.getKey());

                Object oattr= cdf.getAttribute( v.getName(), "LABL_PTR_1");
                String lablPtr1=null;
                if ( oattr!=null && oattr instanceof Vector ) {
                    Vector voattr= (Vector)oattr;
                    if ( voattr.size()>0 ) {
                        lablPtr1= (String)((Vector)oattr).get(0);
                    } else {
                        oattr= null;
                    }
                }

                boolean doComponents= oattr!=null && v.getDimensions().length==1 && v.getDimensions()[0]<=MAX_SLICE1_OFFER;
                if ( doComponents ) {
                    String s= lablPtr1;
                    DefaultMutableTreeNode node= new DefaultMutableTreeNode( e.getKey() );
                    Object o = cdf.get(s);

                    String[] rec= (String[])Array.get(o,0);
                    for ( int i=0; i<rec.length; i++ ) {
                        String snode=  String.format("%d: %s", i, rec[i] ) ;
                        DefaultMutableTreeNode child= new DefaultMutableTreeNode( snode );
                        node.add( child );
                        if ( e.getKey().equals(param) ) {
                            if ( slice1!=null ) {
                                if ( String.valueOf(i).equals(slice1) ) {
                                    selection= new TreePath( new Object[] { root, node, child } );
                                }
                            } else {
                                selection= new TreePath( new Object[] { root, node } );
                            }
                        }
                    }
                    root.add( node );

                } else {
                    DefaultMutableTreeNode node=  new DefaultMutableTreeNode( e.getKey() );
                    root.add( node );
                    if ( e.getKey().equals(param) ) {
                        selection= new TreePath( new Object[] { root, node } );
                    }
                }
            } catch ( Throwable t ) {

            }
        }

        DefaultTreeModel tm= new DefaultTreeModel( root );

        parameterTree.setRootVisible(false);
        parameterTree.setModel(tm);

        if ( selection!=null ) parameterTree.setSelectionPath(selection);

    }

}
