/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Das2ServerDataSourceEditorPanel.java
 *
 * Created on Oct 16, 2009, 12:59:27 PM
 */

package org.das2.datasource;

import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.das2.DasApplication;
import org.das2.DasException;
import org.das2.client.DasServer;
import org.das2.datum.DatumRange;
import org.das2.datum.DatumRangeUtil;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URISplit;

/**
 *
 * @author jbf
 */
public class Das2ServerDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    /** Creates new form Das2ServerDataSourceEditorPanel */
    public Das2ServerDataSourceEditorPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        timeRangeTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http://www-pw.physics.uiowa.edu/das/das2Server", " " }));

        jLabel1.setText("Das2 Server URL:");

        jScrollPane1.setViewportView(jTree1);

        jLabel2.setText("Data Set Id:");

        timeRangeTextField.setText("jTextField1");

        jLabel3.setText("Time Range:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .add(jComboBox1, 0, 376, Short.MAX_VALUE)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(timeRangeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 197, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(timeRangeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(96, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox jComboBox1;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTree jTree1;
    public javax.swing.JTextField timeRangeTextField;
    // End of variables declaration//GEN-END:variables


    protected String serverURL = null;
    public static final String PROP_SERVERURL = "serverURL";

    public String getServerURL() {
        return serverURL;
    }

    public void setServerURL(String serverURL) {
        String oldServerURL = this.serverURL;
        this.serverURL = serverURL;
        firePropertyChange(PROP_SERVERURL, oldServerURL, serverURL);
    }

    protected String dataSetId = null;
    public static final String PROP_DATASETID = "dataSetId";

    public String getDataSetId() {
        return dataSetId;
    }

    public void setDataSetId(String dataSetId) {
        String oldDataSetId = this.dataSetId;
        this.dataSetId = dataSetId;
        firePropertyChange(PROP_DATASETID, oldDataSetId, dataSetId);
    }

    public JPanel getPanel() {
        return this;
    }

    public void setURI(String uri) {
        URISplit split= URISplit.parse(uri);
        serverURL= split.resourceUri.toString();
        Map<String,String> params= URISplit.parseParams(split.params);
        dataSetId= params.get("dataset");
        String startTime= params.get("start_time");
        String endTime= params.get("end_time");
        if ( startTime!=null ) {
            try {
                DatumRange dr = DatumRangeUtil.parseTimeRange(startTime + " to " + endTime);
                timeRangeTextField.setText(dr.toString());
            } catch (ParseException ex) {
                Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        new Thread( getDataSetsRunnable() ).start();

    }

    Runnable getDataSetsRunnable() {
        Runnable run= new Runnable() {
            public void run() {
                try {
                    DasServer server= DasServer.create( new URL( serverURL ) );
                    TreeModel model= server.getDataSetList();
                    jTree1.setModel(model);
                    if ( dataSetId!=null ) selectDataSetId();
                } catch (DasException ex) {
                    Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                    DasApplication.getDefaultApplication().getExceptionHandler().handle(ex);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                    DasApplication.getDefaultApplication().getExceptionHandler().handle(ex);
                }

            }
        };
        return run;
    }

    private void selectDataSetId() {
        String[] ss= dataSetId.split("/");
        TreeNode[] oo= new TreeNode[ss.length+1];
        oo[0]= (TreeNode) jTree1.getModel().getRoot();
        for ( int i=1; i<oo.length; i++ ) {
            for ( int j=0; j<oo[i-1].getChildCount(); j++ ) {
                DefaultMutableTreeNode kid= (DefaultMutableTreeNode) oo[i-1].getChildAt(j);
                if ( kid.getUserObject().equals( ss[i-1] ) ) {
                    oo[i]= kid;
                    break;
                }
            }
            if ( oo[i]==null ) {
                return;
            }
        }
        final TreePath tp= new TreePath( oo );
        Runnable run= new Runnable() {
            public void run() {
            jTree1.setSelectionPath(tp);
            jTree1.scrollPathToVisible(tp);
            }
        };
        SwingUtilities.invokeLater(run);
        
    }

    public String getURI() {
        DatumRange timeRange=null;
        try {
            timeRange = DatumRangeUtil.parseTimeRange(timeRangeTextField.getText());
        } catch (ParseException ex) {
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        TreePath tp=  jTree1.getSelectionPath();
        Object[] tp0= tp.getPath();
        String dataSetId= (String) ((DefaultMutableTreeNode) tp0[1]).getUserObject();
        for ( int i=2; i<tp0.length; i++ ) dataSetId += "/"+ (String) ((DefaultMutableTreeNode) tp0[i]).getUserObject();

        return "vap+das2server:"+serverURL + "?server=dataset" +
                "&dataset="+dataSetId  +
                "&start_time="+ timeRange.min() +
                "&end_time="+ timeRange.max();

    }

}
