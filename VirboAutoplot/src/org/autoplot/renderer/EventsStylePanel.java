/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autoplot.renderer;

import java.awt.Color;
import java.util.LinkedHashMap;
import java.util.Map;
import org.das2.graph.Renderer;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.virbo.autoplot.PlotStylePanel.StylePanel;
import org.virbo.autoplot.dom.PlotElement;

/**
 *
 * @author faden@cottagesystems.com
 */
public class EventsStylePanel extends javax.swing.JPanel implements StylePanel {

    /**
     * Creates new form EventsStylePanel
     */
    public EventsStylePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showLabelsCB = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        fontSizeTF = new javax.swing.JTextField();
        orbitModeCB = new javax.swing.JCheckBox();
        ganttModeCB = new javax.swing.JCheckBox();

        showLabelsCB.setText("Show Labels");
        showLabelsCB.setToolTipText("Show event labels along with bar.");
        showLabelsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showLabelsCBActionPerformed(evt);
            }
        });

        jLabel1.setText("Font Size:");

        fontSizeTF.setText("1em");
        fontSizeTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fontSizeTFFocusLost(evt);
            }
        });
        fontSizeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeTFActionPerformed(evt);
            }
        });

        orbitModeCB.setText("Orbit Mode");
        orbitModeCB.setToolTipText("Show the events in special orbit mode along the bottom with labels.");
        orbitModeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orbitModeCBActionPerformed(evt);
            }
        });

        ganttModeCB.setText("Gantt Mode");
        ganttModeCB.setToolTipText("Show events in a Gantt Chart, with instances enumerated along the vertical axis.\n");
        ganttModeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ganttModeCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showLabelsCB)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fontSizeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(orbitModeCB)
                    .addComponent(ganttModeCB))
                .addContainerGap(227, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showLabelsCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fontSizeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orbitModeCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ganttModeCB)
                .addContainerGap(171, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showLabelsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showLabelsCBActionPerformed
        update();
    }//GEN-LAST:event_showLabelsCBActionPerformed

    private void fontSizeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeTFActionPerformed
        update();
    }//GEN-LAST:event_fontSizeTFActionPerformed

    private void fontSizeTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fontSizeTFFocusLost
        update();
    }//GEN-LAST:event_fontSizeTFFocusLost

    private void orbitModeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orbitModeCBActionPerformed
        if ( orbitModeCB.isSelected() ) ganttModeCB.setSelected(false);
        update();
    }//GEN-LAST:event_orbitModeCBActionPerformed

    private void ganttModeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ganttModeCBActionPerformed
        if ( ganttModeCB.isSelected() ) orbitModeCB.setSelected(false);
        update();
    }//GEN-LAST:event_ganttModeCBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fontSizeTF;
    private javax.swing.JCheckBox ganttModeCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox orbitModeCB;
    private javax.swing.JCheckBox showLabelsCB;
    // End of variables declaration//GEN-END:variables

    BindingGroup elementBindingContext;
    
    Renderer renderer;
    
    private String control = "";

    public static final String PROP_CONTROL = "control";

    public String getControl() {
        return control;
    }

    /**
     * set the control string
     * @param control the control string, e.g. "levels=3,4,5&color=red"
     */
    public void setControl(String control) {
        String oldControl = this.control;
        this.control = control;
        this.renderer.setControl(control);
        updateGUI(renderer);
        firePropertyChange(PROP_CONTROL, oldControl, control);
    }

    private void update() {
        String oldValue= this.control;
        Map<String,String> controls= new LinkedHashMap();
        controls.put( "fontSize", fontSizeTF.getText() );
        controls.put( "showLabels", Renderer.encodeBooleanControl( showLabelsCB.isSelected() ) );
        controls.put( "orbitMode", Renderer.encodeBooleanControl( orbitModeCB.isSelected() ) );
        controls.put( "ganttMode", Renderer.encodeBooleanControl( ganttModeCB.isSelected() ) );
        String c= Renderer.formatControl(controls);
        this.control= c;
        firePropertyChange( Renderer.PROP_CONTROL, oldValue, c );
    }
    
    private void updateGUI( Renderer renderer ) {
        this.control= renderer.getControl();
        fontSizeTF.setText( renderer.getControl("fontSize", "1em") );
        showLabelsCB.setSelected( renderer.getBooleanControl("showLabels", false) );
        orbitModeCB.setSelected( renderer.getBooleanControl("orbitMode", false ) );
        ganttModeCB.setSelected( renderer.getBooleanControl("ganttMode", false ) );
    }
    

       
    @Override
    public void doElementBindings(PlotElement element) {
             this.renderer= element.getController().getRenderer();
        updateGUI( renderer );
        
        BindingGroup bc = new BindingGroup();

        bc.addBinding( Bindings.createAutoBinding( UpdateStrategy.READ_WRITE, 
                element, BeanProperty.create(  PlotElement.PROP_RENDERCONTROL ), 
                this, BeanProperty.create( Renderer.PROP_CONTROL ) ) );
        
        if ( elementBindingContext!=null ) {
            releaseElementBindings();
        }
        
        bc.bind();
        
        repaint();
        
        elementBindingContext= bc;

    }

    @Override
    public void releaseElementBindings() {
        if ( elementBindingContext!=null ) {
            elementBindingContext.unbind();
            elementBindingContext= null;
        }
    }

}
