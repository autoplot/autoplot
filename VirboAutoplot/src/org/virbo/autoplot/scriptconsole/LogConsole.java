/*
 * LogConsole.java
 *
 * Created on June 19, 2008, 4:08 PM
 */

package org.virbo.autoplot.scriptconsole;

import java.awt.EventQueue;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import javax.swing.SwingUtilities;
import org.virbo.autoplot.util.TickleTimer;

/**
 *
 * @author  jbf
 */
public class LogConsole extends javax.swing.JPanel {

    /** Creates new form LogConsole */
    public LogConsole() {
        initComponents();
        timer = new TickleTimer(100, new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                update();
            }
        });        
    }

    TickleTimer timer;
    List<LogRecord> records = new LinkedList<LogRecord>();
    int eventThreadId= -1;   
    int level= Level.ALL.intValue();
    NumberFormat nf= new DecimalFormat("00.000");
    
    public Handler getHandler() {
        Handler h= new Handler() {

            public synchronized void publish(LogRecord rec) {
                synchronized( LogConsole.this ) {
                    if ( !records.contains(rec) ) {
                        records.add(rec);
                        timer.tickle();
                        if ( eventThreadId==-1 && EventQueue.isDispatchThread() ) {
                            eventThreadId= rec.getThreadID();
                        }
                    }
                }
            }

            @Override
            public void flush() {
                
            }

            @Override
            public void close() throws SecurityException {
                
            }
        };
        h.setLevel(Level.ALL);
        return h;
    }

    private synchronized void update() {
        final StringBuffer buf = new StringBuffer();
        
        int n= records.size();
        long t= n==0 ? 0 : records.get(n-1).getMillis();
        
        boolean timeStamps= timeStampsCheckBox.isSelected();
        boolean logLevels= logLevelCheckBox.isSelected();
                
        for (LogRecord rec : records) {
            if ( rec.getLevel().intValue() >= level ) {
                String recMsg= rec.getMessage();
                String prefix= "";                
                if ( timeStamps ) prefix+= nf.format( (rec.getMillis()-t)/1000. ) + " ";
                if ( logLevels ) prefix+= rec.getLevel() + " ";
                if ( rec.getThreadID()==eventThreadId ) prefix += "(GUI) ";
                if ( !prefix.equals("") ) recMsg=  prefix.trim()+ ": " + recMsg;
                
                buf.append(recMsg).append("\n");
            }
        }
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                logTextArea.setText(buf.toString());
            }
        } );
        while ( records.size()>100 ) {
            records.remove(0);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        verbositySelect = new javax.swing.JComboBox();
        timeStampsCheckBox = new javax.swing.JCheckBox();
        logLevelCheckBox = new javax.swing.JCheckBox();

        jScrollPane1.setAutoscrolls(true);

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        clearButton.setText("clear");
        clearButton.setToolTipText("clear all messages.  ");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("verbosity:");

        verbositySelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "warnings", "informational", "debug", "all" }));
        verbositySelect.setSelectedIndex(3);
        verbositySelect.setToolTipText("filter messages by verbosity.");
        verbositySelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verbositySelectActionPerformed(evt);
            }
        });

        timeStampsCheckBox.setText("timing");
        timeStampsCheckBox.setToolTipText("Show time of the message, in seconds before the most recent message.");
        timeStampsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeStampsCheckBoxActionPerformed(evt);
            }
        });

        logLevelCheckBox.setText("log levels");
        logLevelCheckBox.setToolTipText("show the log level (verbosity) of the messages.");
        logLevelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logLevelCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 463, Short.MAX_VALUE)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(clearButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(verbositySelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(timeStampsCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(logLevelCheckBox)
                .add(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(clearButton)
                    .add(jLabel1)
                    .add(verbositySelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(timeStampsCheckBox)
                    .add(logLevelCheckBox)))
        );
    }// </editor-fold>//GEN-END:initComponents

private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
records.removeAll(records);
    update();
}//GEN-LAST:event_clearButtonActionPerformed

private void verbositySelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verbositySelectActionPerformed
String o= (String) verbositySelect.getSelectedItem();

    if ( o.equals("warnings") ) {
        level= Level.WARNING.intValue();
    } else if ( o.equals("informational") ) {
        level= Level.INFO.intValue();
    } else if ( o.equals("debug") ) {
        level= Level.FINEST.intValue();
    } else if ( o.equals("all") ) {
        level= Level.ALL.intValue();
    } else {
        throw new RuntimeException("bad level string: "+o);
    }
    update();
}//GEN-LAST:event_verbositySelectActionPerformed

private void timeStampsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeStampsCheckBoxActionPerformed
update();
}//GEN-LAST:event_timeStampsCheckBoxActionPerformed

private void logLevelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logLevelCheckBoxActionPerformed
update();
}//GEN-LAST:event_logLevelCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox logLevelCheckBox;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JCheckBox timeStampsCheckBox;
    private javax.swing.JComboBox verbositySelect;
    // End of variables declaration//GEN-END:variables

}
