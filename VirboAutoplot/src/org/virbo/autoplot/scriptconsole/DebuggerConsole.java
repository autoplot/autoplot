/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.virbo.autoplot.scriptconsole;

import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.python.core.Py;
import org.python.core.PyFile;
import org.python.util.PythonInterpreter;

/**
 * little GUI for printing the PDB output and sending commands to it.
 * @author jbf
 */
public class DebuggerConsole extends javax.swing.JPanel {

    private static PipedOutputStream myout;
    
    private static Thread workerThread=null;
    private static java.util.concurrent.BlockingQueue<Runnable> queue;
    
    /**
     * set this to true to evaluate expressions on event thread.  This fails off the event thread, but I'm not sure why.
     * On the event thread, things hang when I try to do tooltip lookups.
     * 
     * The problem is I need to have a single thread that sends messages to the PipedOutputStream.  Ed points out
     * java.util.concurrent.BlockingQueue, which could be used to post "step" and "where" messages to the single thread.
     * 
     * Ed also proposes that this be rewritten to make an InputStream that you post messages to, and short
     * of that you would just post messages to an object defined here.
     * 
     */
    private static boolean eventThread= false;
    
    static {
        try {
            queue= new LinkedBlockingQueue<Runnable>();
            Runnable run= new Runnable() {
                public void run() {
                    Runnable doRun;
                    while ( true ) {
                        try {
                            doRun= queue.take();
                            doRun.run();
                        } catch (InterruptedException ex) {
                            Logger.getLogger(DebuggerConsole.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                    }
                }
            };
            workerThread= new Thread(run,"debuggerConsoleWorker");
            workerThread.start();
            myout = new PipedOutputStream();
            PipedInputStream pin= new PipedInputStream(myout);
            Py.getSystemState().stdin= new PyFile( pin ); 
        } catch (IOException ex) {
            Logger.getLogger(DebuggerConsole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Creates new form DebuggerConsole
     */
    public DebuggerConsole( PythonInterpreter out ) {
        initComponents();
        this.out= out;
    }
    
    PythonInterpreter out;
    
    public void println( String s ) {
        jTextArea1.append(s);
        jTextArea1.append("\n");
    }
    
    public void print( String s ) {
        jTextArea1.append(s);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        whereButton = new javax.swing.JButton();

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        upButton.setText("Up");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Ubuntu", 0, 8)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        whereButton.setText("Where");
        whereButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whereButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nextButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(upButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(whereButton)
                .addContainerGap(237, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(upButton)
                    .addComponent(whereButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        Runnable run= new Runnable() { public void run() {
            try {
                myout.write("n\n".getBytes());
                myout.flush();
            } catch (IOException ex) {
                Logger.getLogger(DebuggerConsole.class.getName()).log(Level.SEVERE, null, ex);
            }
        } };
        if ( eventThread ) {
            run.run();
        } else {
            queue.add(run);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        Runnable run= new Runnable() { public void run() {
            try {
                myout.write("u\n".getBytes());
                myout.flush();
            } catch (IOException ex) {
                Logger.getLogger(DebuggerConsole.class.getName()).log(Level.SEVERE, null, ex);
            }
        } };
        if ( eventThread ) {
            run.run();
        } else {
            queue.add(run);
        }
    }//GEN-LAST:event_upButtonActionPerformed

    private void whereButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whereButtonActionPerformed
        Runnable run= new Runnable() { public void run() {
            try {
                myout.write("w\n".getBytes());
                myout.flush();
            } catch (IOException ex) {
                Logger.getLogger(DebuggerConsole.class.getName()).log(Level.SEVERE, null, ex);
            }
        } };        
        if ( eventThread ) {
            run.run();
        } else {
            queue.add(run);
        }        
    }//GEN-LAST:event_whereButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton upButton;
    private javax.swing.JButton whereButton;
    // End of variables declaration//GEN-END:variables
}
