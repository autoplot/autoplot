/*
 * PlotStylePanel.java
 *
 * Created on July 27, 2007, 9:41 AM
 */
package org.virbo.autoplot;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import org.das2.components.DatumEditor;
import org.das2.components.propertyeditor.ColorEditor;
import org.das2.components.propertyeditor.EnumerationEditor;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;
import org.autoplot.help.AutoplotHelpSystem;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.virbo.autoplot.dom.Application;
import org.virbo.autoplot.dom.ApplicationController;
import org.virbo.autoplot.dom.Options;
import org.virbo.autoplot.dom.PlotElement;

/**
 *
 * @author  jbf
 */
public class PlotStylePanel extends javax.swing.JPanel {

    ApplicationModel applicationModel;
    
    EnumerationEditor psymEditor;
    EnumerationEditor lineEditor;
    EnumerationEditor edit;
    EnumerationEditor rebin;
    ColorEditor colorEditor;
    ColorEditor fillColorEditor;
    DatumEditor referenceEditor;
    BindingGroup elementBindingContext;

    Application dom;

    interface StylePanel {
        public abstract void doElementBindings(PlotElement element);
    }
    
    /** Creates new form PlotStylePanel */
    public PlotStylePanel(final ApplicationModel applicationModel) {
        this.applicationModel = applicationModel;
        this.dom= applicationModel.getDocumentModel();
        
        this.dom.getController().addPropertyChangeListener( ApplicationController.PROP_PLOT_ELEMENT, new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                doElementBindings();
            }
        });
        
        initComponents();

        validate();

        Runnable run= new Runnable() {
            public void run() {
                doOptionsBindings();
                doElementBindings();
            }
        };
        run.run();
        //RequestProcessor.invokeLater(run);
        AutoplotHelpSystem.getHelpSystem().registerHelpID( plotPanel, "stylePanel");

    }

    private synchronized void doOptionsBindings( ) {
        BindingGroup bc = new BindingGroup();
        Binding b;

        b = Bindings.createAutoBinding( UpdateStrategy.READ_WRITE, dom.getOptions(), BeanProperty.create( Options.PROP_DRAWGRID ), majorTicksCheckBox, BeanProperty.create("selected") );
        bc.addBinding(b);
        b = Bindings.createAutoBinding( UpdateStrategy.READ_WRITE,  dom.getOptions(), BeanProperty.create( Options.PROP_DRAWMINORGRID ), minorGridCheckBox, BeanProperty.create("selected") );
        bc.addBinding(b);

        bc.bind();
    }

    private transient PropertyChangeListener renderTypeListener= new PropertyChangeListener() {
        public void propertyChange( PropertyChangeEvent ev ) {
            doElementBindings();
        }
    };

    private synchronized void doElementBindings() {
        //TODO: why null?
        PlotElement element= dom.getController().getPlotElement();
        if ( element==null ) return;

        if ( stylePanel.getComponentCount()==1 ) {
            stylePanel.remove( stylePanel.getComponent(0) );
        }
        
        StylePanel editorPanel=null;
        if ( element.getRenderType()==RenderType.spectrogram || element.getRenderType()==RenderType.nnSpectrogram ) {
            editorPanel= new SpectrogramStylePanel(applicationModel);
        } else if ( element.getRenderType()==RenderType.hugeScatter ) {
            editorPanel= new HugeScatterStylePanel(applicationModel);
        } else if ( element.getRenderType()==RenderType.colorScatter ) {
            editorPanel= new ColorScatterStylePanel(applicationModel);
        } else {
            editorPanel= new SeriesStylePanel(applicationModel);
        }

        editorPanel.doElementBindings(element);

        stylePanel.add((JPanel)editorPanel,BorderLayout.CENTER);

        element.removePropertyChangeListener( PlotElement.PROP_RENDERTYPE, renderTypeListener ); // remove it if it's there already
        element.addPropertyChangeListener( PlotElement.PROP_RENDERTYPE, renderTypeListener );

        repaint();
        validate(); // paint the new GUI
        
        AutoplotHelpSystem.getHelpSystem().registerHelpID(this, "stylePanel");

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        stylePanel = new javax.swing.JPanel();
        plotPanel = new javax.swing.JPanel();
        majorTicksCheckBox = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        minorGridCheckBox = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(688, 300));

        jSplitPane2.setLastDividerLocation(300);

        stylePanel.setMinimumSize(new java.awt.Dimension(300, 300));
        stylePanel.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setLeftComponent(stylePanel);

        plotPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Plot"));

        majorTicksCheckBox.setText("major ticks");
        majorTicksCheckBox.setToolTipText("draw grid lines at major ticks\n");

        jLabel12.setText("grid:");

        minorGridCheckBox.setText("minor ticks");
        minorGridCheckBox.setToolTipText("draw grid lines at minor ticks\n");

        org.jdesktop.layout.GroupLayout plotPanelLayout = new org.jdesktop.layout.GroupLayout(plotPanel);
        plotPanel.setLayout(plotPanelLayout);
        plotPanelLayout.setHorizontalGroup(
            plotPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(plotPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel12)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(majorTicksCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(minorGridCheckBox)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        plotPanelLayout.setVerticalGroup(
            plotPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(plotPanelLayout.createSequentialGroup()
                .add(plotPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(majorTicksCheckBox)
                    .add(jLabel12)
                    .add(minorGridCheckBox))
                .addContainerGap(251, Short.MAX_VALUE))
        );

        jSplitPane2.setRightComponent(plotPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel12;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JCheckBox majorTicksCheckBox;
    private javax.swing.JCheckBox minorGridCheckBox;
    private javax.swing.JPanel plotPanel;
    private javax.swing.JPanel stylePanel;
    // End of variables declaration//GEN-END:variables
}
