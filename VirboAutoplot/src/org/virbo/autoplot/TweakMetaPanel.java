/*
 * TweakMetaPanel.java
 *
 * Created on July 27, 2007, 9:04 AM
 */

package org.virbo.autoplot;

import edu.uiowa.physics.pw.das.datum.Units;
import edu.uiowa.physics.pw.das.util.DasMath;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.List;
import javax.swing.SwingUtilities;
import org.virbo.dataset.QDataSet;

/**
 *
 * @author  jbf
 */
public class TweakMetaPanel extends javax.swing.JPanel {
    
    ApplicationModel applicationModel;
    boolean metaDataDirty= false;
    PropertyChangeListener appModelListener = new PropertyChangeListener() {
        public void propertyChange(PropertyChangeEvent evt) {
            if ( evt.getPropertyName().equals(ApplicationModel.PROPERTY_DATASOURCE ) ) {
                if ( !applicationModel.isAutoRangeSuppress() ) {
                    validRangeComboBox.setSelectedItem("");
                    fillValueComboBox.setSelectedItem("");
                }
            }
            updateMetaData();
        }
    };
    
    /** Creates new form TweakMetaPanel */
    public TweakMetaPanel( ApplicationModel applicationModel ) {
        this.applicationModel= applicationModel;
        applicationModel.addPropertyChangeListener( appModelListener );
        initComponents();
    }
    
    private String format(double d) {
        if (Math.abs(DasMath.log10(d)) < 3) {
            DecimalFormat df1 = new DecimalFormat("0.00");
            return df1.format(d);
        } else {
            DecimalFormat df = new DecimalFormat("0.00E0");
            return df.format(d);
        }
    }
    
    private void updateMetaData() {
        metaDataDirty = true;
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                if (metaDataDirty) {
                    updateMetaDataImmediately();
                }
            }
        });
    }
    
    private synchronized void updateMetaDataImmediately() {
        
        QDataSet ds = applicationModel.fillDataset;
        if (ds == null) {
            invalidCountField.setText("--");
            return;
        }
        
        AutoplotUtil.MomentDescriptor moments= AutoplotUtil.moment( ds );
        invalidCountField.setText( String.valueOf(moments.invalidCount) + " of " + String.valueOf(moments.validCount + moments.invalidCount ) );
        
        if ( moments.validCount > 0 ) {
            meanField.setText( format(moments.moment[0] ) );
        } else {
            meanField.setText( "" );
        }
        
        if ( moments.validCount > 1 ) {
            stddevField.setText( format(moments.moment[1] ) );
        } else {
            stddevField.setText( "" );
        }
        
        
        QDataSet dep0 = (QDataSet) ds.property(QDataSet.DEPEND_0);
        assert (dep0 != null);
        Double cadence = (Double) dep0.property( QDataSet.CADENCE );
        
        Units xunits= (Units) dep0.property( QDataSet.UNITS );
        if ( xunits==null ) xunits= Units.dimensionless;
        cadenceLabel.setText(format(cadence)+" "+xunits.getOffsetUnits() );
        
        metaDataDirty = false;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        validRangeComboBox = new javax.swing.JComboBox();
        fillValueComboBox = new javax.swing.JComboBox();
        invalidCountField = new javax.swing.JLabel();
        meanField = new javax.swing.JLabel();
        stddevField = new javax.swing.JLabel();
        cadenceLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        stdDevLabel = new javax.swing.JLabel();
        meanLabel = new javax.swing.JLabel();
        invalidCountLabel = new javax.swing.JLabel();
        fillValueLabel = new javax.swing.JLabel();
        validRangeLabel = new javax.swing.JLabel();

        validRangeComboBox.setEditable(true);
        validRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(none)", "-1e30 to 1e30", "-1 to 101", "0 to 1e38" }));
        validRangeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validRangeComboBoxActionPerformed(evt);
            }
        });

        fillValueComboBox.setEditable(true);
        fillValueComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(none)", "-1e31", "0.0", "-1" }));
        fillValueComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillValueComboBoxActionPerformed(evt);
            }
        });

        invalidCountField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        meanField.setText("0.0");
        meanField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        stddevField.setText("0.0");
        stddevField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cadenceLabel.setText("0.0");
        cadenceLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Cadence:");
        jLabel1.setToolTipText("Cadence is the expected distance between successive measurements.  If two measurements are much further than the cadence, then a connector is not drawn.");

        stdDevLabel.setText("Std Dev:");

        meanLabel.setText("Mean:");

        invalidCountLabel.setText("# Invalid:");
        invalidCountLabel.setToolTipText("# Invalid field indicates the number of measurements and invalid measurements for reference.");

        fillValueLabel.setText("Fill Value:");
        fillValueLabel.setToolTipText("This value is used to identify invalid data that should not be plotted.");

        validRangeLabel.setText("Valid Range:");
        validRangeLabel.setToolTipText("measurements within this range are considered valid.  This field may be changed to exclude outliers or data that has not automatically been detected as fill.");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(invalidCountLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(invalidCountField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(layout.createSequentialGroup()
                            .add(fillValueLabel)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(fillValueComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createSequentialGroup()
                            .add(validRangeLabel)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(validRangeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(meanLabel)
                            .add(stdDevLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(stddevField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(meanField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cadenceLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(226, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {cadenceLabel, meanField, stddevField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(validRangeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(validRangeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(fillValueComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fillValueLabel))
                .add(8, 8, 8)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(invalidCountLabel)
                    .add(invalidCountField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(meanLabel)
                    .add(meanField))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(stdDevLabel)
                    .add(stddevField))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(cadenceLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(140, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {cadenceLabel, meanField, stddevField}, org.jdesktop.layout.GroupLayout.VERTICAL);

    }// </editor-fold>//GEN-END:initComponents
    
    private void fillValueComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillValueComboBoxActionPerformed
        String s= (String) fillValueComboBox.getSelectedItem();
        if ( s.equals("(none)") ) s= "";
        applicationModel.setFill( s );
    }//GEN-LAST:event_fillValueComboBoxActionPerformed
    
    private void validRangeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validRangeComboBoxActionPerformed
        String s= (String) validRangeComboBox.getSelectedItem();
        if ( s.equals("(none)") ) s= "";
        applicationModel.setValidRange( s );
    }//GEN-LAST:event_validRangeComboBoxActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cadenceLabel;
    private javax.swing.JComboBox fillValueComboBox;
    private javax.swing.JLabel fillValueLabel;
    private javax.swing.JLabel invalidCountField;
    private javax.swing.JLabel invalidCountLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel meanField;
    private javax.swing.JLabel meanLabel;
    private javax.swing.JLabel stdDevLabel;
    private javax.swing.JLabel stddevField;
    private javax.swing.JComboBox validRangeComboBox;
    private javax.swing.JLabel validRangeLabel;
    // End of variables declaration//GEN-END:variables
    
}
