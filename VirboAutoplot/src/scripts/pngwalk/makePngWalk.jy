uri= 'vap:http://cdaweb.gsfc.nasa.gov/istp_public/data/polar/hydra/$Y/po_k0_hyd_$Y$m$d_v...cdf?ELE_MEAN_ENERGY&timerange=2001-01-05'
outputFolder= '/tmp/pngwalk/'
product= 'product'
timeFormat= '%Y%m%d'
times= getTimeRangesFor( uri, '2001', timeFormat )

java.io.File(outputFolder).mkdirs()

from org.das2.components import DasProgressPanel

mon= DasProgressPanel.createFramed("running batch")

def myWriteToPng( filename, appmodel, dom, width, height ): 
   appmodel.waitUntilIdle(False);
   from org.das2.util import DasPNGEncoder, DasPNGConstants
   out= java.io.FileOutputStream( filename )
   image = dom.canvases[0].controller.dasCanvas.getImage(width, height);
   encoder = DasPNGEncoder();
   encoder.addText(DasPNGConstants.KEYWORD_CREATION_TIME, java.util.Date().toString() );
   encoder.write(image, out)
   out.close();

n= len(times)
mon.setTaskSize( n )
mon.started()

appmodel= ApplicationModel()
appmodel.addDasPeersToApp()

dom= appmodel.getDocumentModel()
dom.syncTo( getDocumentModel() )


from org.virbo.autoplot.state import StatePersistence
StatePersistence.saveState( java.io.File( outputFolder + product + '.vap' ), dom );

dom.canvases[0].fitted=False
w0= dom.canvases[0].width
h0= dom.canvases[0].height

dom.getController().waitUntilIdle();


count= 0
for i in times:
   count= count+1
   mon.setTaskProgress(count)
   #if ( mon.isCancelled ): break
   print '%d of %d' % (count, n )
   dom.timeRange= DatumRangeUtil.parseTimeRangeValid(i)
   myWriteToPng( outputFolder + product + '_%s.png' % i, appmodel, dom, w0, h0 )

mon.finished()

from org.autoplot.pngwalk import DemoPngWalk
DemoPngWalk.start( 'file:' + outputFolder + product + '_' + timeFormat + '.png', getViewWindow() )

