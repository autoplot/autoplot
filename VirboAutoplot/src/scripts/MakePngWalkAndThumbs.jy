#Sample script to make a set of summary plots

import math

dom= getDocumentModel()

def myWriteToPng( filename, appmodel, ldom, width, height ):
  appmodel.waitUntilIdle(False);
  from org.das2.util import DasPNGEncoder, DasPNGConstants
  out= java.io.FileOutputStream( filename )
  image = ldom.canvases[0].controller.dasCanvas.getImage(width, height);
  encoder = DasPNGEncoder();
  encoder.addText(DasPNGConstants.KEYWORD_CREATION_TIME, java.util.Date().toString() );
  encoder.write(image, out)
  out.close();

def doBatch( times, dom, outputFolder, product, timeFormat, mon ):

   java.io.File(outputFolder).mkdirs()
   java.io.File(outputFolder+'thumbs400/').mkdirs()

   n= len(times)
   mon.setTaskSize( n )
   mon.started()

   mon.setProgressMessage('initializing child application')

   appmodel= ApplicationModel()
   appmodel.addDasPeersToApp()

   dom2= appmodel.getDocumentModel()

   appmodel3= ApplicationModel()
   appmodel3.addDasPeersToApp()

   dom3= appmodel3.getDocumentModel()

   mon.setProgressMessage('synchronize to this application')

   dom2.syncTo( dom, java.util.Arrays.asList( [ 'id' ]) )
   dom2.options.autolayout= False
   dom3.syncTo( dom, java.util.Arrays.asList( [ 'id' ]) )
   dom3.options.autolayout= False

   mon.setProgressMessage('write ' + product + '.vap' )

   dom2.canvases[0].fitted=False
   dom3.canvases[0].fitted=False

   thumbSize= 400
   w0= dom2.canvases[0].width
   h0= dom2.canvases[0].height

   aspect= 1. * w0 / h0
   thumbH= (int)( math.sqrt( thumbSize**2 / (aspect * aspect + 1. ) ) )
   thumbW= (int) ( thumbH * aspect )

   dom3.canvases[0].width= thumbW
   dom3.canvases[0].height= thumbH
   dom3.options.canvasFont= 'Dialog-6'

   from org.virbo.autoplot.state import StatePersistence
   StatePersistence.saveState( java.io.File( outputFolder + product + '.vap' ), dom2 );
   StatePersistence.saveState( java.io.File( outputFolder + 'thumbs400/' + product + '.vap' ), dom3 );

   dom2.getController().waitUntilIdle();
   dom3.getController().waitUntilIdle();

   mon.setProgressMessage('making images')

   tp= TimeParser.create(timeFormat)

   count= 0
   for i in times:
      count= count+1
      if ( mon.cancelled ): break
      mon.setTaskProgress(count)
      dom2.timeRange= tp.parse(i).getTimeRange()
      dom3.timeRange= tp.parse(i).getTimeRange()
      mon.setProgressMessage('write '+ product + '_%s.png' % i )
      myWriteToPng( '%s%s_%s.png' % ( outputFolder, product, i ), appmodel, dom2, w0, h0 )
      myWriteToPng( '%sthumbs400/%s_%s.png' % ( outputFolder, product, i ), appmodel3, dom3, thumbW, thumbH )


   mon.finished()

from javax.swing import JPanel, BoxLayout, JTextField, JLabel, JOptionPane

p= JPanel(  )
p.layout= BoxLayout( p, BoxLayout.Y_AXIS )

p.add( JLabel( 'Filename Root:' ) )
fln_rootTf= JTextField( 'product' )
fln_rootTf.toolTipText='stem used to ensure unique filenames.'
p.add( fln_rootTf )

p.add( JLabel( 'Output Folder:' ) )
outputFolderTf= JTextField( '/tmp/pngwalk/' )
p.add( outputFolderTf )

p.add( JLabel( 'Time Format:' ) )
timeFormatTf= JTextField( '%Y%m%d' )
p.add( timeFormatTf )

p.add( JLabel( 'Time Range:' ) )
timeRangeTf= JTextField( '2009' )
p.add( timeRangeTf )

outputFolder=0
timeRangeStr=0
fln_root=0
proceed= False

if ( JOptionPane.showConfirmDialog( getViewWindow(), p, 'pngwalk options', JOptionPane.OK_CANCEL_OPTION )==JOptionPane.OK_OPTION ):
  outputFolder= outputFolderTf.text
  timeRangeStr= timeRangeTf.text
  fln_root=  fln_rootTf.text
  timeFormat= timeFormatTf.text
  proceed= True
else:
  proceed= False

from org.virbo.autoplot import ApplicationModel

if ( proceed ):

   from org.das2.components import DasProgressPanel
   mon= DasProgressPanel.createFramed( getViewWindow(),"running batch")

   times= generateTimeRanges( timeFormat, timeRangeStr )

   doBatch( times, dom, outputFolder, fln_root, timeFormat, mon )

   if ( not mon.cancelled ):

     from org.autoplot.pngwalk import DemoPngWalk
     if ( outputFolder[1]==':' ):
       url= 'file:/'+outputFolder
     else:
       url= 'file:'+outputFolder

     DemoPngWalk.start( url + fln_root + '_' + timeFormat + '.png', getViewWindow() )
