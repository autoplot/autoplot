/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.autoplot.pdsppi;

import java.awt.Window;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import org.das2.util.LoggerManager;
import org.das2.util.filesystem.FSTreeModel;
import org.das2.util.filesystem.FileSystem;
import org.das2.util.monitor.NullProgressMonitor;
import org.das2.util.monitor.ProgressMonitor;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URISplit;

/**
 *
 * @author jbf
 */
public class PDSPPIDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    private static final Logger logger= LoggerManager.getLogger("apdss.pdsppi");
    
    /**
     * Creates new form PDSPPIDataSourceEditorPanel
     */
    public PDSPPIDataSourceEditorPanel() {
        initComponents();
        updateFacetSoon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        idComboBox = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        dsComboBox = new javax.swing.JComboBox();

        idTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Facet: SPACECRAFT");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "voyager", "galileo", "cassini" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        idComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        idComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idComboBoxActionPerformed(evt);
            }
        });

        jButton1.setText("Pick...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        dsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(pick id)" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(idComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 157, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(idTextField)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(dsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String facet= String.valueOf(jComboBox1.getSelectedItem());
        updateFacetSoon();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String id= idTextField.getText();
            String root= idComboBox.getSelectedItem().toString();
            FileSystem fs= new PDSPPIFileSystem( "/PPI/"+root+"/"+id );
            javax.swing.JTree tree= new javax.swing.JTree( new FSTreeModel(fs) );
            if ( JOptionPane.OK_OPTION==JOptionPane.showConfirmDialog(idComboBox, new JScrollPane(tree) ) ) {
                String ds= tree.getSelectionPath().getLastPathComponent().toString();
                if ( ds.endsWith(".lbl") || ds.endsWith(".LBL") || ds.endsWith(".tab" ) || ds.endsWith(".TAB")  ) {
                    ds= ds.substring(0,ds.length()-4);
                }
                idTextField.setText( ds );
                id= idTextField.getText();
                root= idComboBox.getSelectedItem().toString();
                id= "PPI/"+root+"/"+id;
                updateDssSoon(id);
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(PDSPPIDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void updateDssComboBoxSoon( final Map<String,String> dss ) {
        Runnable run= new Runnable() {
            @Override
            public void run() {
                String[] ss= new String[ dss.size() ];
                ss= dss.keySet().toArray( ss );
                dsComboBox.setModel( new DefaultComboBoxModel(ss) );
                dsComboBox.setEnabled(true);
            }
        };
        SwingUtilities.invokeLater(run);
    }
    
    private void updateDssSoon( final String id ) {
        final Map<String,String> dss= PDSPPIDB.getInstance().getDss( id, new NullProgressMonitor() );
        updateDssComboBoxSoon(dss);
        //Runnable run= new Runnable() {
         //   @Override
         //   public void run() {
         //       final Map<String,String> dss= PDSPPIDB.getInstance().getDss( id, new NullProgressMonitor() );
         //       updateDssComboBoxSoon(dss);
         //   }
        //};
        //new Thread(run).start();
    }
    
    private void idTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextFieldActionPerformed
            String id= idTextField.getText();
            String root= idComboBox.getSelectedItem().toString();
            id= "PPI/"+root+"/"+id;
            updateDssSoon(id);
            
            
    }//GEN-LAST:event_idTextFieldActionPerformed

    private void idComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idComboBoxActionPerformed
        idTextField.setText("");
    }//GEN-LAST:event_idComboBoxActionPerformed

    /**
     * return the result of the URL as a string array.
     * @param src the source.
     * @return the string array. 
     */
    private String[] getStringArray( URL src ) throws IOException {
        List<String> result= new ArrayList();
        BufferedReader reader= null;
        try {
            reader= new BufferedReader( new InputStreamReader( src.openStream() ) );
            String line= reader.readLine();
            while ( line!=null ) {
                result.add(line);
                line= reader.readLine();
            }
        } finally {
            if ( reader!=null ) reader.close();
        }
        return result.toArray( new String[result.size()] );
    }
    
    private void updateFacetSoon() {
        Runnable run= new Runnable() {
            @Override
            public void run() {
                try {
                    logger.fine("updateFacetSoon");
//http://ppi.pds.nasa.gov/ditdos/inventory?sc=Galileo&facet=SPACECRAFT_NAME&title=Cassini&o=txt
                    String facet= String.valueOf(jComboBox1.getSelectedItem());
                    URL url= new URL( String.format( "http://ppi.pds.nasa.gov/ditdos/inventory?sc=%s&facet=SPACECRAFT_NAME&title=%s&o=txt", facet, facet ) );
                    final String[] dss= getStringArray( url );
                    Runnable run= new Runnable() { public void run() {
                       idComboBox.setModel( new DefaultComboBoxModel(dss) );
                    } };
                    SwingUtilities.invokeLater(run);
                } catch (MalformedURLException ex) {
                    throw new RuntimeException(ex);
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }   
        };
        new Thread(run).start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox dsComboBox;
    private javax.swing.JComboBox idComboBox;
    private javax.swing.JTextField idTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean reject(String uri) throws Exception {
        return false;
    }


    
    /**
     * 
     * @param uri
     * @param parent
     * @param mon
     * @return
     * @throws Exception 
     */
    @Override
    public boolean prepare(String uri, Window parent, ProgressMonitor mon) throws Exception {
        return true;
    }

    Map<String,String> params; // hold on to original values for a reference.
    
    @Override
    public void setURI(String uri) {
        URISplit split= URISplit.parse(uri);
        Map<String,String> params= URISplit.parseParams(split.params);
        this.idTextField.setText(params.get(ID));    
    }
    public static final String DS = "ds";
    public static final String ID = "id";

    @Override
    public void markProblems(List<String> problems) {
        
    }

    @Override
    public JPanel getPanel() {
        return this;
    }

    @Override
    public String getURI() {
        String id= "PPI/" + this.idComboBox.getSelectedItem() + "/" + this.idTextField.getText(); //TODO: why must I add PPI??
        return "vap+pdsppi:" + ID + "="+ id + "&" + DS + "="+this.dsComboBox.getSelectedItem();
    }
    
    public static void main( String[] args ) {
        PDSPPIDataSourceEditorPanel test= new PDSPPIDataSourceEditorPanel();
        JOptionPane.showMessageDialog( null, test);
        System.err.println( test.getURI() );
                
    }
}
