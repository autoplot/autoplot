/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.autoplot.pdsppi;

import java.awt.Window;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import org.das2.util.LoggerManager;
import org.das2.util.filesystem.FSTreeModel;
import org.das2.util.filesystem.FileSystem;
import org.das2.util.monitor.NullProgressMonitor;
import org.das2.util.monitor.ProgressMonitor;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URISplit;

/**
 * Editor panel for getting data from PDS/PPI node.
 * @author jbf
 */
public class PDSPPIDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    private static final Logger logger= LoggerManager.getLogger("apdss.pdsppi");
    
    /**
     * Creates new form PPARAMPPIDataSourceEditorPanel
     */
    public PDSPPIDataSourceEditorPanel() {
        initComponents();
        if ( FileSystem.settings().isOffline() ) {
            JOptionPane.showMessageDialog(this,"internet is not available");
            this.setEnabled(false);
            return;
        }
        updateSpacecraftSoon();
        //updateInventorySoon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        inventoryScComboBox = new javax.swing.JComboBox();
        idComboBox = new javax.swing.JComboBox();
        pickProductButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        paramList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        idTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("SPACECRAFT:");

        inventoryScComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "voyager", "galileo", "cassini" }));
        inventoryScComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inventoryScComboBoxItemStateChanged(evt);
            }
        });

        idComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idComboBoxActionPerformed(evt);
            }
        });

        pickProductButton.setText("Pick...");
        pickProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickProductButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(paramList);

        jLabel2.setText("Dataset:");

        jLabel3.setText("Product:");

        jLabel4.setText("Parameters:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(idTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pickProductButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(idComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inventoryScComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inventoryScComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pickProductButton)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * apparently the id needs to have underscores where there are slashes...  e.g.
     * PPI/CO-E/J/S/SW-CAPS-5-DDR-ELE-MOMENTS-V1.0 -> PPI/CO-E_J_S_SW-CAPS-5-DDR-ELE-MOMENTS-V1.0
     * @param root like PPI/CO-E/J/S/SW-CAPS-5-DDR-ELE-MOMENTS-V1.0/
     * @return result like PPI/CO-E_J_S_SW-CAPS-5-DDR-ELE-MOMENTS-V1.0
     */
    private String removeExtraSlashes( String root ) {
        int i= root.indexOf("/"); // 4 for PPI/
        i++;
        return root.substring(0,i) + root.substring(i).replaceAll("/","_");
    }
    
    private void pickProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickProductButtonActionPerformed
        try {
            String l_id= idTextField.getText();
            String root= removeExtraSlashes( idComboBox.getSelectedItem().toString() );
            FileSystem fs= new PDSPPIFileSystem( root );
            javax.swing.JTree tree= new javax.swing.JTree( new FSTreeModel(fs) );
            if ( JOptionPane.OK_OPTION==JOptionPane.showConfirmDialog(idComboBox, new JScrollPane(tree) ) ) {
                String ds= tree.getSelectionPath().getLastPathComponent().toString();
                if ( ds.endsWith(".lbl") || ds.endsWith(".LBL") || ds.endsWith(".tab" ) || ds.endsWith(".TAB")  ) {
                    ds= ds.substring(0,ds.length()-4);
                }
                idTextField.setText( ds );
                l_id= idTextField.getText();
                updateParamsSoon(l_id);
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(PDSPPIDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pickProductButtonActionPerformed

    /**
     * update the paramComboBox later on the event thread.
     * @param dss 
     */
    private void updateParamComboBoxSoon( final Map<String,String> dss ) {
        Runnable run= new Runnable() {
            @Override
            public void run() {
                String[] ss= new String[ dss.size() ];
                ss= dss.keySet().toArray( ss );
                //paramComboBox.setModel( new DefaultComboBoxModel(ss) );
                //paramComboBox.setEnabled(true);
                
                DefaultListModel lm= new DefaultListModel();
                for ( String s: ss ) {
                    lm.addElement(s);
                }
                paramList.setModel( lm );
                paramList.setSelectedValue( param, true );
            }
        };
        SwingUtilities.invokeLater(run);
    }
    
    /**
     * given the new ID, update the available params.
     * @param id 
     */
    private void updateParamsSoon( final String id ) {
        String product= this.idComboBox.getSelectedItem() + "/" + id;
        final Map<String,String> dss= PDSPPIDB.getInstance().getParams( product, new NullProgressMonitor() );
        updateParamComboBoxSoon(dss);
        logger.warning("work done on the event thread. TODO: move to its own thread.");
        //Runnable run= new Runnable() {
         //   @Override
         //   public void run() {
         //       final Map<String,String> dss= PDSPPIDB.getInstance().getParams( id, new NullProgressMonitor() );
         //       updateDssComboBoxSoon(dss);
         //   }
        //};
        //new Thread(run).start();
    }
    
    private void idTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextFieldActionPerformed
            String id= idTextField.getText();
            String root= idComboBox.getSelectedItem().toString();
            id= root+"/"+id;
            updateParamsSoon(id);
    }//GEN-LAST:event_idTextFieldActionPerformed

    private void idComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idComboBoxActionPerformed
        idTextField.setText("");
    }//GEN-LAST:event_idComboBoxActionPerformed

    private void inventoryScComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inventoryScComboBoxItemStateChanged
        this.sc= evt.getItem().toString();
        updateInventorySoon();
    }//GEN-LAST:event_inventoryScComboBoxItemStateChanged

    private void updateSpacecraftSoon() {
        Runnable run= new Runnable() {
            @Override
            public void run() {
                final String[] scs= PDSPPIDB.getInstance().getSpacecraft();
                logger.fine("updateFacetSoon");
                Runnable run= new Runnable() { public void run() {
                    inventoryScComboBox.setModel( new DefaultComboBoxModel(scs) );
                    
                    if ( sc==null ) {
                        logger.finer("picking arbitrary spacecraft for GUI");
                        sc=scs[0];
                    } //TODO: pref for last spacecraft
                    
                    inventoryScComboBox.setSelectedItem( sc.replaceAll("\\+"," ") );
                    updateInventorySoon();
                } };
                SwingUtilities.invokeLater(run);
            }   
        };
        new Thread(run).start();
    }
    
    private void doCheckIdSelectedItem() {
        if ( inventoryScComboBox.getSelectedItem().equals(sc) ) { 
            if ( id!=null ) {
                int i= id.indexOf("/",0);
                i= id.indexOf("/",i+1);
                idComboBox.setSelectedItem(id.substring(0,i) );
                idTextField.setText(id.substring(i+1));
                updateParamsSoon(id);
            }
        }
    }
    
    private void updateInventorySoon() {
        Runnable run= new Runnable() {
            @Override
            public void run() {
                logger.fine("updateInventorySoon");
                final String[] dss= PDSPPIDB.getInstance().getIds("sc="+sc,"PPI/");
                Runnable run= new Runnable() { public void run() {
                    idComboBox.setModel( new DefaultComboBoxModel(dss) );
                    doCheckIdSelectedItem();
                } };
                SwingUtilities.invokeLater(run);
            }   
        };
        new Thread(run).start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox idComboBox;
    private javax.swing.JTextField idTextField;
    private javax.swing.JComboBox inventoryScComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList paramList;
    private javax.swing.JButton pickProductButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean reject(String uri) throws Exception {
        return false;
    }


    
    /**
     * 
     * @param uri
     * @param parent
     * @param mon
     * @return
     * @throws Exception 
     */
    @Override
    public boolean prepare(String uri, Window parent, ProgressMonitor mon) throws Exception {
        return true;
    }

    Map<String,String> params; // hold on to original values for a reference.
    
    @Override
    public void setURI(String uri) {
        URISplit split= URISplit.parse(uri);
        Map<String,String> params= URISplit.parseParams(split.params);
        this.sc= params.get(SC);
        if ( sc!=null ) {
            this.inventoryScComboBox.setSelectedItem(sc);
        }
        this.id= params.get(ID); 
        this.param= params.get(PARAM);
        updateSpacecraftSoon();
    }
    
    private String sc;
    private String id;
    private String param;
    
    public static final String PARAM = "param";
    public static final String ID = "id";
    public static final String SC = "sc";  // spacecraft facet
    
    @Override
    public void markProblems(List<String> problems) {
        
    }

    @Override
    public JPanel getPanel() {
        return this;
    }

    @Override
    public String getURI() {
        String id= this.idComboBox.getSelectedItem() + "/" + this.idTextField.getText(); //TODO: why must I add PPI??
        id= id.replaceAll(" ","+");
        String param= this.paramList.getSelectedValue().toString().replaceAll(" ","+");
        String sc= inventoryScComboBox.getSelectedItem().toString().replaceAll(" ","+");
        return "vap+pdsppi:" + SC+"="+ sc + "&" + ID + "="+ id + "&" + PARAM + "="+ param;
    }
    
    public static void main( String[] args ) {
        PDSPPIDataSourceEditorPanel test= new PDSPPIDataSourceEditorPanel();
        //test.setURI("vap+pdsppi:sc=Voyager+2&id=PPI/VG2-J-CRS-5-SUMM-FLUX-V1.0/DATA/BS2E_RATE&param=BS2E RATE2");
        test.setURI("vap+pdsppi:sc=Voyager+2");
        JOptionPane.showMessageDialog( null, test);
        System.err.println( test.getURI() );
                
    }
}
