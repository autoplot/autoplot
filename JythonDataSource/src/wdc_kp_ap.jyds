# wdc_kp_ap.jyds
#
# Reads data from the World Data Center in a format that is beyond the abilities of the AsciiTableParser.
# Example file: ftp://ftp.ngdc.noaa.gov/STP/GEOMAGNETIC_DATA/INDICES/KP_AP/1986
#
# This can be used as a reader for any of these files:
# vap+jyds:ftp://ftp.ngdc.noaa.gov/STP/GEOMAGNETIC_DATA/INDICES/KP_AP/1989?script=file:/home/jbf/temp/autoplot2010/JythonDataSource/src/wdc_kp_ap.jyds
#          \--------------- resourceURI ---------------------------------/
#

resourceURI= getParam( 'resourceURI', 'ftp://ftp.ngdc.noaa.gov/STP/GEOMAGNETIC_DATA/INDICES/KP_AP/1986', 'example file to load' )

# getAp=1 read Ap, otherwise read Kp.
getAp= getParam( 'getAp', 'Ap', 'read Kp or Ap data', [ 'Kp','Ap' ] )

# Download the file to make it local.  Monitor is a progress monitor for the download.
file= getFile( resourceURI, monitor ).toString()

# Get the year from the last four characters of the resource name.
syear= file[-4:]

fp= open( file, "r" )

timeparser= TimeParser.create( '$Y$m$d' )
timetags= DataSetBuilder( 1, 100 )   # create builders for the data and timetags, allocate 100 records initially.
kpap= DataSetBuilder( 1, 100 )

if ( getAp=='Ap' ):
   offs= 31
   spac= 3
else:
   offs= 12
   spac= 2
kpap.putProperty( QDataSet.NAME, getAp )
kpap.putProperty( QDataSet.TITLE, getAp )

for line in fp:
    stime= syear + line[2:6]     # form YYYYMMDD by adding the year to MMDD in the 2,3,4,and 5th characters
    base_t2000= timeparser.parse( stime ).getTime( Units.t2000 )   # parse the time and return it in seconds since 2000-01-01T00:00Z.
    for j in xrange(8):          # for j=0,1,2,3,4,5,6,7
       i= offs + j*spac
       d= int( line[i:i+spac] )
       t= base_t2000 + 3600 * ( 1.5 + j*3 )
       timetags.nextRecord( t )  # add the offset seconds for each of 8 measurements.
       kpap.nextRecord( d )

timetags.putProperty( QDataSet.UNITS, Units.t2000 )                # indicate the times are seconds since 2000-01-01T00:00.
kpap.putProperty( QDataSet.DEPEND_0, timetags.getDataSet() )       # connect the timetags to the data.

data= kpap.getDataSet()                                            # data is the resultant dataset.

