/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JythonEditorPanel.java
 *
 * Created on Jul 14, 2009, 10:44:41 AM
 */

package org.virbo.datasource.jython;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import org.das2.util.filesystem.FileSystem;
import org.das2.util.monitor.NullProgressMonitor;
import org.das2.util.monitor.ProgressMonitor;
import org.virbo.datasource.DataSetSelector;
import org.virbo.datasource.DataSetURI;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.FileSystemUtil;
import org.virbo.datasource.LogNames;
import org.virbo.datasource.URISplit;
import org.virbo.jythonsupport.JythonUtil;
import org.virbo.jythonsupport.ui.EditorAnnotationsSupport;
import org.virbo.jythonsupport.ui.ScriptPanelSupport;

/**
 *
 * @author jbf
 */
public class JythonEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    private static final Logger logger= Logger.getLogger( LogNames.APDSS_JYDS );

    ScriptPanelSupport support;
    String suri;
    File file;
    URI resourceUri;
    boolean hasVariables= false;
    List<JComponent> tflist;
    List<String> paramsList;
    List<String> deftsList;
    List<Character> typesList;  // only 'A' and 'F' right now

    /** Creates new form JythonEditorPanel */
    public JythonEditorPanel() {
        initComponents();
        tearoffTabbedPane1.hideMouseAdapter();

        support= new ScriptPanelSupport(textArea);
        support.addCaretLabel(caretPositionLabel);
        support.addFileLabel(fileNameLabel);
        support.setReadOnly();

        scriptScrollPane.getVerticalScrollBar().setUnitIncrement(12); //TODO: should be font height
        paramsScrollPane.getVerticalScrollBar().setUnitIncrement(12); //TODO: should be font height
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        variableComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        tearoffTabbedPane1 = new org.das2.components.TearoffTabbedPane();
        scriptPanel = new javax.swing.JPanel();
        caretPositionLabel = new javax.swing.JLabel();
        fileNameLabel = new javax.swing.JLabel();
        scriptScrollPane = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        textArea = new org.virbo.jythonsupport.ui.EditorTextPane();
        paramsScrollPane = new javax.swing.JScrollPane();
        paramsPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        variableComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(running script)" }));

        jLabel1.setText("Select variable:");
        jLabel1.setToolTipText("The dataset pointed to by the URI");

        caretPositionLabel.setText("1,1");

        fileNameLabel.setMinimumSize(new java.awt.Dimension(200, 16));

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(textArea, java.awt.BorderLayout.CENTER);

        scriptScrollPane.setViewportView(jPanel1);

        org.jdesktop.layout.GroupLayout scriptPanelLayout = new org.jdesktop.layout.GroupLayout(scriptPanel);
        scriptPanel.setLayout(scriptPanelLayout);
        scriptPanelLayout.setHorizontalGroup(
            scriptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, scriptPanelLayout.createSequentialGroup()
                .add(fileNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(caretPositionLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(scriptScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
        );
        scriptPanelLayout.setVerticalGroup(
            scriptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, scriptPanelLayout.createSequentialGroup()
                .add(scriptScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scriptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(fileNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(caretPositionLabel)))
        );

        tearoffTabbedPane1.addTab("script", scriptPanel);

        paramsPanel.setLayout(new javax.swing.BoxLayout(paramsPanel, javax.swing.BoxLayout.Y_AXIS));
        paramsScrollPane.setViewportView(paramsPanel);

        tearoffTabbedPane1.addTab("params", paramsScrollPane);

        jLabel2.setText("Select from the variables calculated by the script, 'data' or 'result' is used by default:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(variableComboBox, 0, 474, Short.MAX_VALUE))
            .add(tearoffTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(jLabel2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(tearoffTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .add(2, 2, 2)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(variableComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel caretPositionLabel;
    protected javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel paramsPanel;
    private javax.swing.JScrollPane paramsScrollPane;
    private javax.swing.JPanel scriptPanel;
    private javax.swing.JScrollPane scriptScrollPane;
    private org.das2.components.TearoffTabbedPane tearoffTabbedPane1;
    private org.virbo.jythonsupport.ui.EditorTextPane textArea;
    private javax.swing.JComboBox variableComboBox;
    // End of variables declaration//GEN-END:variables

    public JPanel getPanel() {
        return this;
    }

    /**
     * TODO: params is object?
     * @param parms
     * @return
     */
    private boolean isBoolean( List<Object> parms ) {
        if ( parms.size()==2 && parms.contains("T") && parms.contains("F") ) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * add JLabels if documentation is available.
     * @param f
     * @return true if some documentation was found.
     */
    private boolean doDocumentation( File f ) {
        BufferedReader reader=null;
        boolean hasDoc= false;
        try {
            reader = new BufferedReader( new FileReader(f) );
            Map<String,String> doc= JythonUtil.getDocumentation( reader );

            String title= doc.get("TITLE");
            if ( title!=null ) {
                 paramsPanel.add( new JLabel("<html><b>"+title+"</b></html>") );
                 hasDoc= true;
            }
            String description= doc.get("DESCRIPTION");
            if ( description!=null ) {
                 paramsPanel.add( new JLabel("<html>"+description+"</html>") );
                 hasDoc= true;
            }

        } catch (IOException ex ) {
            logger.log(Level.SEVERE, null, ex);
        } finally {
            if ( reader!=null ) try {
                reader.close();
            } catch (IOException ex) {
                logger.log(Level.SEVERE, null, ex);
            }
        }
        return hasDoc;
    }

    private JComponent getSpacer() {
        JComponent spacer= new JLabel("  ");
        spacer.setSize( new Dimension(20,16) );
        spacer.setMinimumSize( new Dimension(20,16) );
        spacer.setPreferredSize( new Dimension(20,16) );
        return spacer;
    }

    private boolean doVariables( File f, Map<String,String> params ) {

        Map<String,JythonUtil.Param> parms;

        boolean hasVars= false;
        tflist= new ArrayList();
        paramsList= new ArrayList();
        deftsList= new ArrayList();
        typesList= new ArrayList();
        
        try {
            parms= JythonDataSourceFactory.getParams( f.toURI(), new NullProgressMonitor() );

            paramsPanel.add( new JLabel("<html>This script has the following input parameters.  Buttons on the right show default values.<br><br></html>") );

            for ( Entry<String,JythonUtil.Param> e: parms.entrySet() ) {
                //String s= e.getKey();
                JythonUtil.Param parm= e.getValue();
                
                String vname= parm.name;                
                String label= parm.label;

                JComponent ctf= null;

                boolean isBool= isBoolean( parm.enums );

                String colon= isBool ? "" : ":";

                if ( parm.doc==null ) {
                    label= vname+ colon;
                } else {
                    String doc= parm.doc;
                    if ( doc.startsWith("'") ) doc= doc.substring(1,doc.length()-1);// pop off the quotes
                    if ( !parm.label.equals(parm.name) ) {
                        doc= doc + " ("+parm.label+" inside the script)";
                    }
                    label= "<html>" + parm.name + ", <em>" + doc + "</em>"+colon+"</html>";
                }      
                
                if ( !isBool ) {
                    JPanel labelPanel= new JPanel();
                    labelPanel.setLayout( new BoxLayout( labelPanel, BoxLayout.X_AXIS ) );
                    JLabel l= new JLabel( label );
                    labelPanel.add( getSpacer() );
                    labelPanel.add( l );
                    labelPanel.setAlignmentX( JComponent.LEFT_ALIGNMENT );
                    paramsPanel.add( labelPanel );
                }

                JPanel valuePanel= new JPanel(  );
                valuePanel.setLayout( new BoxLayout( valuePanel, BoxLayout.X_AXIS ) );
                if ( !isBool ) valuePanel.add( getSpacer() );

                if ( parm.type=='R' ) {

                    String val= params.get(vname);
                    if ( val!=null ) {
                        if ( val.startsWith("'") ) val= val.substring(1);
                        if ( val.endsWith("'") ) val= val.substring(0,val.length()-1);
                    } else {
                        val= String.valueOf( parm.deft );
                    }

                    final String fval= val;

                    final DataSetSelector sel= new DataSetSelector();
                    sel.setHidePlayButton(true);
                    sel.setSuggestFiles(true);

                    final JTextField tf= new JTextField(50);
                    Dimension x= tf.getPreferredSize();
                    x.width= Integer.MAX_VALUE;
                    tf.setMaximumSize(x);
                    tf.setUI( tf.getUI() ); // kludge to maybe avoid deadlock.

                    Icon fileIcon= new javax.swing.ImageIcon( getClass().getResource("/org/virbo/datasource/jython/file2.png"));
                    JButton filesButton= new JButton( fileIcon );
                    filesButton.addActionListener( new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            JFileChooser c= new JFileChooser();
                            URISplit split2= URISplit.parse(fval);
                            if ( split2.scheme.equals("file") ) {
                                c.setSelectedFile( new File( split2.file.substring(7)) );
                            }
                            int r= c.showOpenDialog(jLabel1);
                            if ( r==JFileChooser.APPROVE_OPTION) {
                                tf.setText("file://"+c.getSelectedFile().toString());
                            }
                        }
                    });
                    tf.setAlignmentX( JComponent.LEFT_ALIGNMENT );

                    tf.setText( val );
                    ctf= tf;
                    valuePanel.add( ctf );
                    filesButton.setAlignmentX( JComponent.LEFT_ALIGNMENT );
                    valuePanel.add( filesButton );

                } else {
                    String val;
                    if ( params.get(vname)!=null ) {
                        val= params.get(vname);
                        if ( val.startsWith("'") ) val= val.substring(1);
                        if ( val.endsWith("'") ) val= val.substring(0,val.length()-1);
                    } else {
                        val= String.valueOf( parm.deft );
                    }
                    if ( parm.enums!=null && parm.enums.size()>0 ) {
                        if ( isBoolean( parm.enums ) ) {
                            JCheckBox jcb= new JCheckBox( label );
                            jcb.setSelected( val.equals("T") );
                            ctf= jcb;

                        } else {
                            JComboBox jcb= new JComboBox(parm.enums.toArray());
                            jcb.setEditable(false);
                            Object oval=null;
                            if ( parm.deft instanceof Long ) {
                                oval = Long.valueOf(val);
                            } else if ( parm.deft instanceof Integer ) {
                                oval = Integer.valueOf(val);
                            } else if ( parm.deft instanceof Double ) {
                                oval = Double.valueOf(val);
                            } else if ( parm.deft instanceof Float ) {
                                oval = Float.valueOf(val);
                            } else {
                                oval = val;
                            }
                            jcb.setSelectedItem(oval);
                            
                            ctf= jcb;
                            Dimension x= ctf.getPreferredSize();
                            x.width= Integer.MAX_VALUE;
                            ctf.setMaximumSize(x);
                            ctf.setAlignmentX( JComponent.LEFT_ALIGNMENT );
                        }

                    } else {
                        JTextField tf= new JTextField(50);
                        Dimension x= tf.getPreferredSize();
                        x.width= Integer.MAX_VALUE;
                        tf.setMaximumSize(x);
                        tf.setAlignmentX( JComponent.LEFT_ALIGNMENT );

                        tf.setText( val );
                        ctf= tf;
                    }
                    
                    valuePanel.add( ctf );
                }
                

                final String fdeft= parm.type=='R' ? "default" : String.valueOf(parm.deft);
                final String fvalue= String.valueOf(parm.deft);
                final JComponent ftf= ctf;
                JButton defaultButton= new JButton( new AbstractAction( fdeft ) {
                    public void actionPerformed( ActionEvent e ) {
                        if ( ftf instanceof DataSetSelector ) {
                            ((DataSetSelector)ftf).setValue(fvalue);
                        } else if ( ftf instanceof JComboBox ) {
                            JComboBox jcb= ((JComboBox)ftf);
                            for ( int i=0; i<jcb.getItemCount(); i++ ) {
                                if ( fvalue.toString().equals( jcb.getItemAt(i).toString() ) ) {
                                    jcb.setSelectedIndex(i);
                                }
                            }
                        } else if ( ftf instanceof JCheckBox ) {
                            ((JCheckBox)ftf).setSelected( fvalue.equals("T") );
                        } else {
                            ((JTextField)ftf).setText(fvalue);
                        }
                    }
                });
                defaultButton.setToolTipText( ( parm.type == 'R' ) ? String.valueOf(parm.deft) : "Click to reset to default" );
                valuePanel.add( defaultButton );
                valuePanel.add( getSpacer() );
                valuePanel.setAlignmentX( JComponent.LEFT_ALIGNMENT );

                paramsPanel.add( valuePanel );
                tflist.add(ctf);

                paramsList.add( parm.name );
                deftsList.add( String.valueOf( parm.deft ) );
                typesList.add( parm.type );

                hasVars= true;
            }
                
            hasVars= parms.size()>0;

            if ( !hasVars ) {
                paramsPanel.add( new JLabel("<html><em>no input parameters</em></html>") );
            }

            paramsPanel.add( Box.createVerticalGlue() );
            paramsPanel.revalidate();

        } catch (IOException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        return hasVars;

    }

    private String[] getScriptURI( URISplit split ) {
        Map<String,String> params= URISplit.parseParams(split.params);

        String furi;
        String resourceUri1=null;
        if ( params.containsKey("script") ) {
            furi= params.get("script");
            resourceUri1= split.resourceUri==null ? null : split.resourceUri.toString();
        } else {
            furi= split.resourceUri.toString();
            resourceUri1= null;
        }

        return new String[] { furi, resourceUri1 };
            
    }

    public void setURI(String url) {
        try {
            this.suri= url;
            URISplit split= URISplit.parse(suri);

            String[] furir= getScriptURI( split );
            File f = DataSetURI.getFile( furir[0], new NullProgressMonitor() );

            Map<String,String> results= JythonDataSourceFactory.getResultParameters( f.toString(), new NullProgressMonitor() );
            String[] dropList= new String[results.size()+1];
            int i=0;
            int idx= -1;

            Map<String,String> params= URISplit.parseParams(split.params);

            String param= params.remove("arg_0");

            dropList[0]= "";
            for ( Entry<String,String> ent: results.entrySet()  ) {
                dropList[i+1]= "<html>"+ent.getKey()+"<span color=#808080>: <em>"+ent.getValue()+"</em></span>";
                if ( param!=null && param.equals(ent.getKey()) ) {
                    idx= i+1;
                }
                i++;
            }
            variableComboBox.setModel( new DefaultComboBoxModel( dropList ) );
            if ( idx>=0 ) {
                variableComboBox.setSelectedIndex(idx);
            } else {
                variableComboBox.setSelectedIndex(0);
            }

            if ( doDocumentation(f) ) {
                paramsPanel.add( new JLabel("<html><br></html>") );
            }

            Map<String,String> ffparams= new HashMap( params );

            if ( furir[1]!=null ) ffparams.put( "resourceURI", furir[1] );
            hasVariables= doVariables( f,ffparams );

            if ( hasVariables ) {
                tearoffTabbedPane1.setSelectedIndex(1);
            }

            support.loadFile(f);

            if ( FileSystemUtil.isChildOf( FileSystem.settings().getLocalCacheDir(), support.getFile() ) || !support.getFile().canWrite() ) {
                support.setReadOnly();
            }

            List<String> errs= new ArrayList();
            if ( JythonUtil.pythonLint( f.toURI(), errs) ) {
                EditorAnnotationsSupport esa= textArea.getEditorAnnotationsSupport();
                for ( String s: errs ) {
                    String[] ss= s.split(":",2);
                    try {
                        String doc= ss[1];
                        doc= doc.replaceAll("<", "&lt;");
                        doc= doc.replaceAll(">", "&gt;");
                        esa.annotateLine(Integer.parseInt(ss[0]), EditorAnnotationsSupport.ANNO_WARNING, "Variable name is already used before execution: " + doc + "<br>Consider using a different name");
                    } catch (BadLocationException ex) {
                        logger.log(Level.SEVERE, null, ex);
                    }
                }

            }



        } catch (IOException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    public String getURI() {

        if ( support.isDirty() && support.getFile()!=null ) {
            OutputStream out=null;
            try {
                out = new FileOutputStream( support.getFile() );
                String text = textArea.getText();
                out.write(text.getBytes());
                support.setDirty(false);
            } catch ( IOException ex ) {
                
            } finally {
                if ( out!=null ) {
                    try {
                        out.close();
                    } catch ( IOException ex ) {
                        //nothing
                    }
                }
            }
        }

        URISplit split=  URISplit.parse(suri);

        Map<String,String> params= URISplit.parseParams(split.params);

        String param= (String)variableComboBox.getSelectedItem();
        int i= param.indexOf("<span");
        if ( i==-1 ) {
            params.put( "arg_0", param.trim() );
        } else {
            int j= param.startsWith("<html>") ? 6 : 0;
            params.put( "arg_0", param.substring(j,i).trim() );
        }

        for ( int j=0; j<paramsList.size(); j++ ) {
            String name= paramsList.get(j);
            JComponent jc= tflist.get(j);
            String value;
            if ( jc instanceof JTextField ) {
                value= ((JTextField)jc).getText();
            } else if ( jc instanceof DataSetSelector ) {
                value= ((DataSetSelector)jc).getValue();
            } else if ( jc instanceof JComboBox ) {
                value= String.valueOf( ((JComboBox)jc).getSelectedItem() );
            } else if ( jc instanceof JCheckBox ) {
                value= ((JCheckBox)jc).isSelected() ? "T" : "F";
            } else {
                throw new IllegalArgumentException("the code needs attention: component for "+name+" not supported ");
            }
            
            String deft= deftsList.get(j);
            char type= typesList.get(j);

            if ( !value.equals(deft) || params.containsKey(name) ) {
                if ( type=='A' ) {
                    value= value.replaceAll("\'", "");
                    if ( !( value.startsWith("'") && value.endsWith("'") ) ) {
                        value=  "'" + value + "'";
                    }
                    params.put( name, value );
                } else if ( type=='R' ) {
                    URISplit ruriSplit= URISplit.parse(value);
                    if ( !params.containsKey("script") ) {
                        params.put( "script", split.resourceUri.toString() );
                    }
                    split.resourceUri= ruriSplit.resourceUri;
                    split.scheme= ruriSplit.scheme;
                    split.authority= ruriSplit.authority;
                    split.path= ruriSplit.path;
                    split.file= ruriSplit.file;
                    if ( split.vapScheme==null ) split.vapScheme= "vap+jyds";
                } else {
                    params.put( name, value );
                }
            } else if ( type=='R' && value.equals(deft) && ( split.resourceUri==null || !split.resourceUri.toString().equals(deft) ) ) {
                URISplit ruriSplit= URISplit.parse(value); //TODO: consider removing script=param.
                if (params.get("script")==null ) {
                    params.put( "script", split.resourceUri.toString() );
                }
                split.resourceUri= ruriSplit.resourceUri;
                split.scheme= ruriSplit.scheme;
                split.authority= ruriSplit.authority;
                split.path= ruriSplit.path;
                split.file= ruriSplit.file;
                if ( split.vapScheme==null ) split.vapScheme= "vap+jyds"; // DANGER--this ought-not to be hard coded, but this is all I can do for now...
            }
        }

        split.params= URISplit.formatParams(params);

        if ( support.isDirty() ) {
            try {
                FileWriter writer = new FileWriter(support.getFile());
                writer.write( textArea.getText() );
                writer.close();
            } catch (IOException ex) {
                logger.log(Level.SEVERE, null, ex);
            }
        }
        return URISplit.format(split);
    }

    public boolean reject(String uri) throws Exception {
        URISplit split= URISplit.parse(uri);
        if ( split.file==null || split.file.length()==0 || split.file.equals("file:///") ) {
            Map<String,String> params= URISplit.parseParams(split.params);
            if ( params.containsKey("script") ) {
                return false;
            } else {
                return true;
            }
        } else {
            return false;
        }
    }


    public boolean prepare(String uri, Window parent, ProgressMonitor mon) throws Exception {

        URISplit split= URISplit.parse(uri);
        String[] furir= getScriptURI( split );
        DataSetURI.getFile( furir[0], mon );
        return true;
    }

    public void markProblems(List<String> problems) {
        
    }

}
