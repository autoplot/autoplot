/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autoplot.inline;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import org.das2.util.LoggerManager;
import org.das2.util.monitor.ProgressMonitor;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.DataSourceUtil;

/**
 * Editor panel for inline URIs.  This supports events lists and short 
 * Jython scripts with a simple editor.
 * @author jbf
 */
public class InlineDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    /**
     * Creates new form InlineDataSourceEditorPanel
     */
    public InlineDataSourceEditorPanel() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        schemeComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        deleteSelectedButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        directionsLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        examplesButton = new javax.swing.JButton();

        jTabbedPane1.setToolTipText("jython tab allows short scripts to be constructed");
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        schemeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Event List", "Y(X)" }));
        schemeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schemeComboBoxActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(table);

        addButton.setText("Add...");
        addButton.setToolTipText("Add a record");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteSelectedButton.setText("Delete Selected");
        deleteSelectedButton.setToolTipText("Delete selected records");
        deleteSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Dataset Type:");

        directionsLabel.setText("<html><i>Enter a list of times or points</i></html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directionsLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteSelectedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(schemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteSelectedButton)
                        .addGap(0, 180, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("data", jPanel1);

        jScrollPane2.setViewportView(jTextPane1);

        jLabel1.setText("<html>Enter lines of jython assignments and expressions.  Expressions are interpreted as the X values, then Y values, then Z values if specified.");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        examplesButton.setText("Examples...");
        examplesButton.setToolTipText("Example scripts");
        examplesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examplesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(examplesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(examplesButton)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("jython", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private static ComboBoxModel getExamplesComboBoxModel( int icol ) {
        if ( icol==0 ) {
            return new DefaultComboBoxModel( new String[] { 
                "2014-01-01T01:01Z",
                "2014-01-01T01:01:01.000Z",
                "1.23"
            } );
        } else {
            return new DefaultComboBoxModel( new String[] {
                "1.23"
            });
        }
    }
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        LoggerManager.logGuiEvent(evt);
        JPanel p= new JPanel();
        p.setLayout( new FlowLayout() );
        JTextField[] tfs= new JTextField[tm.getColumnCount()];
        for ( int i=0; i<tm.getColumnCount(); i++ ) {  // load up the last record so it can be edited to make new record
            JComboBox cb1= new JComboBox();
            cb1.setToolTipText("Examples");
            cb1.setModel( getExamplesComboBoxModel( i ) );
            cb1.setEditable(true);
            JTextField tf1= ((JTextField)cb1.getEditor().getEditorComponent());
            tf1.setColumns(20);
            //if ( i==0 ) tf1.requestFocusInWindow(); no effect on Linux, probably because of modal dialog.
            int ir= tm.getRowCount()-1;
            if ( tm.getRowCount()>0 ) {
                tf1.setText( String.valueOf( tm.getValueAt(ir,i) ) );
            }
            p.add(cb1);
            tfs[i]= tf1;
        }
        if ( JOptionPane.showConfirmDialog(schemeComboBox,p,"Enter Data Point", JOptionPane.OK_CANCEL_OPTION)==JOptionPane.OK_OPTION ) {
            String[] ss= new String[tm.getRowCount()+1];
            for ( int i=0; i<tm.getRowCount(); i++ ) {
                if ( tm.getColumnCount()>1 ) {
                    StringBuilder sb= new StringBuilder();
                    sb.append((String)tm.getValueAt(i,0));
                    for ( int j=1; j<tm.getColumnCount(); j++ ) {
                        sb.append(",").append((String)tm.getValueAt(i,j));
                    }
                    ss[i]= sb.toString();
                } else {
                    ss[i]= (String)tm.getValueAt(i,0);
                }
            }
            StringBuilder sval= new StringBuilder(tfs[0].getText());
            for ( int i=1; i<tm.getColumnCount(); i++ ) {
                sval.append(",").append(tfs[i].getText());
            }
            if ( tm.getColumnCount()>1 ) {
                ss[tm.getRowCount()]= sval.toString();
                
                tm= toTableModel( DataSourceUtil.strjoin( Arrays.asList(ss), ";" ), 2 );
                
            } else {
                ss[tm.getRowCount()]= sval.toString();
                tm= toTableModel(ss);
            }
            table.setModel( tm );
            
        }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private String getValueAt( TableModel tm, int i, int j ) {
        String ss= (String)tm.getValueAt(i,j);
        ss= ss.replaceAll(",","");
        ss= ss.replaceAll(";","");
        return ss;
    }

    
    private void deleteSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedButtonActionPerformed
        LoggerManager.logGuiEvent(evt);
        int[] rows= table.getSelectedRows();
        //String[] ss= new String[tm.getRowCount()-rows.length];
        StringBuilder sb= new StringBuilder();
        
        int irow= 0;
        int k= 0;
        
        if ( rows.length==0 ) {
            return;
        }
        
        boolean rank2Table= tm.getColumnCount()>1;
        
        for ( int i=0; i<tm.getRowCount(); i++ ) {
            if ( irow<rows.length && rows[irow]==i ) {
                irow++;
            } else {
                if ( k>0 ) sb.append( rank2Table ? ";" : ",");
                if ( rank2Table ) {
                    for ( int j=0; j<tm.getColumnCount(); j++ ) {
                        if ( j>0 ) sb.append(",");
                        sb.append( getValueAt(tm,i,j));
                    }
                } else {
                    sb.append( getValueAt(tm,i,0));
                }
                k++;
            }
        }
        int rank= tm.getColumnCount()>1 ? 2 : 1;
        tm= toTableModel(sb.toString(), rank );
        table.setModel( tm );
    }//GEN-LAST:event_deleteSelectedButtonActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        LoggerManager.logGuiEvent(evt);
        if ( jTabbedPane1.getSelectedIndex()==0 ) {
            if ( tm==null ) {
                tm= toTableModel( new String[0] );
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void initializeScheme() {
        if ( schemeComboBox.getSelectedIndex()==0 ) {
            tm= toTableModel( new String[0] );
            directionsLabel.setText("<html><i>Enter a list of times or points</i></html>");
        } else if ( schemeComboBox.getSelectedIndex()==1 ) {
            tm= toTableModel( 0, 2 );
            directionsLabel.setText("<html><i>Enter a list X and Y values</i></html>");
        }
        table.setModel( tm );
    }
    
    private void schemeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemeComboBoxActionPerformed
        LoggerManager.logGuiEvent(evt);
        initializeScheme();
    }//GEN-LAST:event_schemeComboBoxActionPerformed

    private void examplesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examplesButtonActionPerformed
        LoggerManager.logGuiEvent(evt);
        final String t1= "linspace(0,5*PI,100)\nsin(linspace(0,5*PI,100))";
        final String t2= "t=linspace(0,5*PI,100)\nt,sin(t)";
        final String t3= "createEvent('2014-005',0x00FF00,'On')";
        final String t4= "ds=createEvent('2014-005T12:00/12:10',0x00FF00,'Instrument On')\nds=createEvent(ds,'2014-005T13:00/13:10',0xFF0000,'Instrument Off')\nds=createEvent(ds,'2014-005T14:00/14:10',0x00FF00,'Instrument On')\nds";
        final JTextArea tf1= new JTextArea(5,40);
        tf1.setText(t1);
        final JComboBox examples= new JComboBox( new DefaultComboBoxModel( new Object[] { "Sine","Sine With Variable","createEvent","multiple events" }) );
        examples.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if ( examples.getSelectedIndex()==0 ) {
                    tf1.setText(t1);
                } else if ( examples.getSelectedIndex()==1 ) {
                    tf1.setText(t2);
                } else if ( examples.getSelectedIndex()==2 ) {
                    tf1.setText(t3);
                } else if ( examples.getSelectedIndex()==3 ) {
                    tf1.setText(t4);
                }
            }
        } );
        JPanel p= new JPanel();
        p.setLayout( new BorderLayout() );
        p.add( examples, BorderLayout.NORTH );
        p.add( tf1, BorderLayout.CENTER );
        if ( JOptionPane.OK_OPTION==JOptionPane.showConfirmDialog( examplesButton, p, "Example Inline Jython", JOptionPane.OK_CANCEL_OPTION ) ) {
            jTextPane1.setText( tf1.getText() );
        }
    }//GEN-LAST:event_examplesButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteSelectedButton;
    private javax.swing.JLabel directionsLabel;
    private javax.swing.JButton examplesButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JComboBox schemeComboBox;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    TableModel tm;
    String text;
    JTextField tf;
    
    @Override
    public boolean reject(String uri) throws Exception {
        return false;
    }

    @Override
    public boolean prepare(String uri, Window parent, ProgressMonitor mon) throws Exception {
        return true;
    }

    private static TableModel toTableModel( final int nr, final int nc ) {
        TableModel   tm= new AbstractTableModel() {

            @Override
            public int getRowCount() {
                return nr;
            }

            @Override
            public int getColumnCount() {
                return nc;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                return "";
            }
        };
        return tm;

    }
    
    /**
     *
     * @param s the value of s
     * @param rank the value of rank
     */
    private static TableModel toTableModel( final String s, int rank) {
        final String[] ss= s.split(";");
        if ( rank==1 ) {
            return toTableModel( s.split(",") );
        }
        final int nc= ss[0].split(",").length;
        
        TableModel   tm= new AbstractTableModel() {

                @Override
                public int getRowCount() {
                    return ss.length;
                }

                @Override
                public int getColumnCount() {
                    return nc;
                }

                @Override
                public Object getValueAt(int rowIndex, int columnIndex) {
                    String[] sss= ss[rowIndex].split(",");
                    return sss[columnIndex];
                }

                @Override
                public boolean isCellEditable( int row, int col ) {
                    return true;
                }          
                
                @Override
                public void setValueAt( Object v, int row, int col ) {
                    String[] sss= ss[row].split(",");
                    sss[col]= String.valueOf(v);
                    StringBuilder b= new StringBuilder(sss[0].replaceAll(",",""));
                    for ( int j=1; j<sss.length; j++ ) {
                        b.append(',').append(sss[j].replaceAll(",",""));
                    }
                    ss[row]= b.toString();
                }
            };
        return tm;
    }
    
    private static TableModel toTableModel( final String[] s ) {
         TableModel   tm= new AbstractTableModel() {

                @Override
                public int getRowCount() {
                    return s.length;
                }

                @Override
                public int getColumnCount() {
                    return 1;
                }

                @Override
                public Object getValueAt(int rowIndex, int columnIndex) {
                    return s[rowIndex];
                }
                
                @Override
                public boolean isCellEditable( int row, int col ) {
                    return true;
                }
                
                @Override
                public void setValueAt( Object v, int row, int col ) {
                    s[row]= String.valueOf(v).replaceAll(",","");
                }
            };
        return tm;
    }
    
    @Override
    public void setURI(String uri) {
        if ( uri.startsWith("vap+inline:") ) {
            uri= uri.substring(11);
        }
        if ( uri.length()==0 || Character.isDigit( uri.charAt(0) ) ) {
            int amp= uri.indexOf("&");
            if ( amp==-1 ) amp= uri.length();
            String lit= uri.substring(0,amp);
            if ( lit.contains(";") ) {
                this.tm= toTableModel(lit, 2);
            } else {
                this.tm= toTableModel(lit, 1);
            }
        } else {
            String[] ss= uri.split("&");
            StringBuilder t= new StringBuilder();
            for ( int i=0; i<ss.length; i++ ) {
                if ( i>0 ) t.append("\n");
                t.append(ss[i]);
            }
            text= t.toString();
            this.tm= null;
        }
    }

    @Override
    public void markProblems(List<String> problems) {
        
    }

    @Override
    public JPanel getPanel() {
        TableModel ltm= tm;
        initComponents();
        if ( text!=null ) jTextPane1.setText(text);
        if ( ltm!=null ) {
            if ( tm.getColumnCount()==2 ) {
                this.schemeComboBox.setSelectedIndex(1);
            }
            tm= ltm; // kludgy way to get around goofy code.
            this.table.setModel(ltm); //schemeComboBox.setSelectedIndex resets the table.
            tf= new JTextField();
            tf.setEditable(true);
            this.table.setCellEditor(new DefaultCellEditor(tf) );
            
            int cellHeight = 21;  // c.getPreferredSize().height;

            table.setRowHeight( cellHeight );

        } else {
            this.schemeComboBox.setSelectedIndex(0);
            this.jTabbedPane1.setSelectedIndex(1);
        }
        return this;
    }

    @Override
    public String getURI() {
        if ( jTabbedPane1.getSelectedIndex()==0 ) {
            StringBuilder s= new StringBuilder( "vap+inline:" );
            for ( int i=0; i<tm.getRowCount(); i++ ) {
                if ( tm.getColumnCount()>1 ) {
                    for ( int j=0; j<tm.getColumnCount();j++ ) {
                        if ( j>0 ) s.append(",");
                        s.append(tm.getValueAt(i,j));
                    }
                    s.append(";");
                } else {
                    if ( i>0 ) s.append(",");
                    s.append(tm.getValueAt(i,0));
                }
            }
            if ( tm.getColumnCount()==1 ) {
                s.append("&RENDER_TYPE=eventsBar");
            }
            return s.toString();
        } else {
            StringBuilder s= new StringBuilder( "vap+inline:" );
            String t= jTextPane1.getText();
            String[] ss= t.split("\n");
            for ( int i=0; i<ss.length; i++ ) {
                if ( i>0 ) s.append("&");
                s.append(ss[i]);
            }
            return s.toString();
        }
    }
    
    public static void main( String[] args ) {
        //String uri= "vap+inline:ripples(20,20)";
        String uri= "vap+inline:20,30,40";
        DataSourceEditorPanel ds= new InlineDataSourceEditorPanel();
        ds.setURI(uri);
        if ( JOptionPane.OK_OPTION== JOptionPane.showConfirmDialog( null, ds.getPanel(), "Test Inline Editor", JOptionPane.OK_CANCEL_OPTION ) ) {
            System.err.println(ds.getURI());
        }
        
    }
}
