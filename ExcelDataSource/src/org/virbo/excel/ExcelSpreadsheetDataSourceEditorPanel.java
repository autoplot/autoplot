/*
 * AsciiDataSourceEditorPanel.java
 *
 * Created on September 5, 2008, 3:47 PM
 */
package org.virbo.excel;

import java.awt.Rectangle;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.poi.hssf.contrib.view.SVTableModel;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.das2.util.monitor.NullProgressMonitor;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.virbo.datasource.DataSetURL;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URLSplit;

/**
 *
 * @author  jbf
 */
public class ExcelSpreadsheetDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    HSSFWorkbook wb;
    Map<Integer,String> columns;
    boolean focusDepend0= false;
    
    /** Creates new form AsciiDataSourceEditorPanel */
    public ExcelSpreadsheetDataSourceEditorPanel() {
        initComponents();
        jTable1.setCellSelectionEnabled(true);

        jTable1.getColumnModel().getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                if (jTable1.getColumnModel().getSelectedColumnCount() == 1) {
                    int col = jTable1.getColumnModel().getSelectedColumns()[0];
                    String name= columns.get(col);
                    if ( name==null ) {
                        name= "" + (char) (col + 'A');
                    }
                    if ( focusDepend0 ) {
                        setDep0( name );
                    } else {
                        setColumn( name );
                    }
                }
            }
        });

        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                setFirstRow( jTable1.getSelectedRow() + 1);
            }
        });

        BindingGroup bc = new BindingGroup();

        bc.addBinding( Bindings.createAutoBinding( UpdateStrategy.READ_WRITE, this, BeanProperty.create("firstRow"), this.firstRowTextField, BeanProperty.create("value") ) );
        bc.addBinding( Bindings.createAutoBinding( UpdateStrategy.READ_WRITE, this, BeanProperty.create("column"), this.columnsComboBox, BeanProperty.create("selectedItem") ) );
        bc.addBinding( Bindings.createAutoBinding( UpdateStrategy.READ_WRITE, this, BeanProperty.create("dep0"), this.dep0Columns, BeanProperty.create("selectedItem") ) );
        bc.addBinding( Bindings.createAutoBinding( UpdateStrategy.READ_WRITE, this, BeanProperty.create("sheet"), this.sheetComboBox, BeanProperty.create("selectedItem") ) );

        bc.bind();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sViewer1 = new org.apache.poi.hssf.contrib.view.SViewer();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        sheetComboBox = new javax.swing.JComboBox();
        firstRowTextField = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        columnsComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        dep0Columns = new javax.swing.JComboBox();

        org.jdesktop.layout.GroupLayout sViewer1Layout = new org.jdesktop.layout.GroupLayout(sViewer1.getContentPane());
        sViewer1.getContentPane().setLayout(sViewer1Layout);
        sViewer1Layout.setHorizontalGroup(
            sViewer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        sViewer1Layout.setVerticalGroup(
            sViewer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        jLabel1.setText("First Row:");

        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Sheet:");

        sheetComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sheetComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sheetComboBoxItemStateChanged(evt);
            }
        });

        firstRowTextField.setText("11");

        jLabel3.setText("Column:");

        columnsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        columnsComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                columnsComboBoxItemStateChanged(evt);
            }
        });
        columnsComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                columnsComboBoxFocusGained(evt);
            }
        });

        jLabel4.setText("Depends On:");

        dep0Columns.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dep0Columns.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dep0ColumnsItemStateChanged(evt);
            }
        });
        dep0Columns.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dep0ColumnsFocusGained(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(firstRowTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel3)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(dep0Columns, 0, 187, Short.MAX_VALUE)
                    .add(columnsComboBox, 0, 187, Short.MAX_VALUE))
                .add(245, 245, 245)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sheetComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(firstRowTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(jLabel2)
                    .add(sheetComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(columnsComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(dep0Columns, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private synchronized void maybeInitializeWorkBook() throws IOException, FileNotFoundException {
        if ( wb==null ) {
            InputStream in = new FileInputStream(file);
            POIFSFileSystem fs = new POIFSFileSystem(in);
            wb = new HSSFWorkbook(fs);
        }

    }
    
    private void resetSheet(String string) {
        try {
            if (file == null) return;
            
            maybeInitializeWorkBook();

            List<String> result = new ArrayList<String>();
            for (int i = 0; i < wb.getNumberOfSheets(); i++) {
                String s = wb.getSheetName(i);
                result.add(s);
            }

            HSSFSheet sheet = wb.getSheet(string);
            this.jTable1.setModel(new SVTableModel(sheet));

            Rectangle rect = jTable1.getCellRect(getFirstRow(), 0, true);
            jTable1.scrollRectToVisible(rect);



        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }

private void sheetComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sheetComboBoxItemStateChanged
    setSheet((String) sheetComboBox.getSelectedItem());
}//GEN-LAST:event_sheetComboBoxItemStateChanged

private void columnsComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_columnsComboBoxItemStateChanged
    setColumn((String) columnsComboBox.getSelectedItem());
}//GEN-LAST:event_columnsComboBoxItemStateChanged

private void dep0ColumnsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dep0ColumnsItemStateChanged
    setDep0( (String)dep0Columns.getSelectedItem() );
}//GEN-LAST:event_dep0ColumnsItemStateChanged

private void dep0ColumnsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dep0ColumnsFocusGained
    this.focusDepend0= true;
}//GEN-LAST:event_dep0ColumnsFocusGained

private void columnsComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_columnsComboBoxFocusGained
    this.focusDepend0= false;
}//GEN-LAST:event_columnsComboBoxFocusGained

    protected File file = null;
    public static final String PROP_FILE = "file";

    public File getFile() {
        return file;
    }

    public void setFile(File file) throws IOException {
        this.file= file;
        
        maybeInitializeWorkBook();

        List<String> result = new ArrayList<String>();
        for (int i = 0; i < wb.getNumberOfSheets(); i++) {
            String s = wb.getSheetName(i);
            result.add(s);
        }
        
        sheetComboBox.setModel( new DefaultComboBoxModel(result.toArray() ) );
        
        if ( !result.contains( getSheet() ) ) {
            setSheet( result.get(0) );
        } else {
            resetSheet( getSheet() );
        }
        
    }

        protected String sheet;
    public static final String PROP_SHEET = "sheet";

    public String getSheet() {
        return sheet;
    }

    public void setSheet(String sheet) {
        String oldSheet = this.sheet;
        this.sheet = sheet;
        resetSheet(this.sheet);
        firePropertyChange(PROP_SHEET, oldSheet, sheet);
    }

    protected int firstRow = 1;
    public static final String PROP_FIRST_ROW = "firstRow";

    public int getFirstRow() {
        return firstRow;
    }

    public void setFirstRow(int row) {
        try {
            int oldRow = this.firstRow;
            this.firstRow = row;
            Rectangle rect = jTable1.getCellRect(getFirstRow() - 1, 0, true);
            columns= ExcelUtil.getColumns( wb, getSheet(), "" + getFirstRow(), new NullProgressMonitor() );
            columnsComboBox.setModel( new DefaultComboBoxModel( columns.values().toArray() ) );
            int col= jTable1.getSelectedColumn();
            setColumn(columns.get(col));
            List<String> dep0Values= new ArrayList<String>( columns.values() );
            dep0Values.add(0,"");
            dep0Columns.setModel( new DefaultComboBoxModel( dep0Values.toArray() ) );
            jTable1.scrollRectToVisible(rect);
            firePropertyChange(PROP_FIRST_ROW, oldRow, row);
        } catch (IOException ex) {
            Logger.getLogger(ExcelSpreadsheetDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    protected String column="A";
    public static final String PROP_COLUMN = "column";

    public String getColumn() {
        return column;
    }

    public void setColumn(String column) {
        if ( column.equals("parcel") ) {
            System.err.println("hseles");
        }
        String oldColumn = this.column;
        this.column = column;
        firePropertyChange(PROP_COLUMN, oldColumn, column);
    }

    protected String dep0="";
    public static final String PROP_DEP0 = "dep0";

    public String getDep0() {
        return dep0;
    }

    public void setDep0(String dep0) {
        String oldDep0 = this.dep0;
        this.dep0 = dep0;
        firePropertyChange(PROP_DEP0, oldDep0, dep0);
    }

    public JPanel getPanel() {
        return this;
    }

    public void setUrl(String url) {
        try {
            URLSplit split = URLSplit.parse(url);
            Map<String, String> params = URLSplit.parseParams(split.params);

            File f = DataSetURL.getFile( new URL(split.file), new NullProgressMonitor());
            setFile(f);
            
            if ( params.containsKey("sheet") ) {
                setSheet(params.get("sheet"));
            }
            
            if ( params.containsKey("firstRow") ) {
                setFirstRow( Integer.parseInt(params.get("firstRow") ) );
            } else {
                setFirstRow( 1 );
            }
            
            if ( params.containsKey("column" ) ) {
                setColumn(params.get("column"));   
            }
            
            if ( params.containsKey("depend0" ) ) {
                setDep0(params.get("depend0"));   
            }

        } catch (IOException ex) {
            Logger.getLogger(ExcelSpreadsheetDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    public String getUrl() {
        String surl=  URLSplit.uriDecode( this.file.toURI().toString() );
        String args="";
        if ( firstRow>1 ) {
            args+= "&firstRow="+firstRow;
        }
        
        if ( sheetComboBox.isEnabled() && this.sheetComboBox.getSelectedIndex()>0 ) {
            args+= "&sheet="+ this.getSheet() ;
        }
        
        if ( !this.getDep0().equals("") ) {
            args+= "&depend0="+this.getDep0();
        }
         
        args+= "&column=" + getColumn();
        
        if ( args.length()>0 ) {
            surl+= "?" + args.substring(1);
        }
        return surl;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox columnsComboBox;
    public javax.swing.JComboBox dep0Columns;
    public javax.swing.JFormattedTextField firstRowTextField;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public org.apache.poi.hssf.contrib.view.SViewer sViewer1;
    public javax.swing.JComboBox sheetComboBox;
    // End of variables declaration//GEN-END:variables

}
