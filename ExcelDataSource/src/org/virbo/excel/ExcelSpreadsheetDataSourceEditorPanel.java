/*
 * AsciiDataSourceEditorPanel.java
 *
 * Created on September 5, 2008, 3:47 PM
 */
package org.virbo.excel;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.beans.binding.BindingContext;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.poi.hssf.contrib.view.SVTableModel;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.das2.util.monitor.NullProgressMonitor;
import org.virbo.datasource.DataSetURL;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URLSplit;

/**
 *
 * @author  jbf
 */
public class ExcelSpreadsheetDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    /** Creates new form AsciiDataSourceEditorPanel */
    public ExcelSpreadsheetDataSourceEditorPanel() {
        initComponents();
        jTable1.setCellSelectionEnabled(true);
        jTable1.getColumnModel().getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                System.err.println("Columns: " + e);
            }
        });
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                setFirstRow(e.getFirstIndex() + 1);
            }
        });

        BindingContext bc= new BindingContext();
        
        bc.addBinding( this, "${firstRow}", this.firstRowTextField, "value"  );
         
        bc.bind();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sViewer1 = new org.apache.poi.hssf.contrib.view.SViewer();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        sheetComboBox = new javax.swing.JComboBox();
        firstRowTextField = new javax.swing.JFormattedTextField();

        org.jdesktop.layout.GroupLayout sViewer1Layout = new org.jdesktop.layout.GroupLayout(sViewer1.getContentPane());
        sViewer1.getContentPane().setLayout(sViewer1Layout);
        sViewer1Layout.setHorizontalGroup(
            sViewer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        sViewer1Layout.setVerticalGroup(
            sViewer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        jLabel1.setText("First Row:");

        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Sheet:");

        sheetComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sheetComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sheetComboBoxItemStateChanged(evt);
            }
        });

        firstRowTextField.setText("11");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(firstRowTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sheetComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(firstRowTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(sheetComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setSheet(String string) {
        try {
            InputStream in = new FileInputStream(file);
            POIFSFileSystem fs = new POIFSFileSystem(in);
            HSSFWorkbook wb = new HSSFWorkbook(fs);

            List<String> result = new ArrayList<String>();
            for (int i = 0; i < wb.getNumberOfSheets(); i++) {
                String s = wb.getSheetName(i);
                result.add(s);
            }

            HSSFSheet sheet = wb.getSheet(string);
            this.jTable1.setModel(new SVTableModel(sheet));
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }

private void sheetComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sheetComboBoxItemStateChanged
    setSheet((String) sheetComboBox.getSelectedItem());
}//GEN-LAST:event_sheetComboBoxItemStateChanged

    protected File file = null;
    public static final String PROP_FILE = "file";

    public File getFile() {
        return file;
    }

    public void setFile(File file) throws IOException {
        this.file= file;
        
        InputStream in = new FileInputStream(file);
        POIFSFileSystem fs = new POIFSFileSystem(in);
        HSSFWorkbook wb = new HSSFWorkbook(fs);

        List<String> result = new ArrayList<String>();
        for (int i = 0; i < wb.getNumberOfSheets(); i++) {
            String s = wb.getSheetName(i);
            result.add(s);
        }
        
        sheetComboBox.setModel( new DefaultComboBoxModel(result.toArray() ) );
        
        HSSFSheet sheet= wb.getSheet(result.get(0) );
        this.jTable1.setModel( new SVTableModel(sheet) );
        
    }

    protected int firstRow = 0;
    public static final String PROP_FIRST_ROW = "firstRow";

    public int getFirstRow() {
        return firstRow;
    }

    public void setFirstRow(int row) {
        int oldRow = this.firstRow;
        this.firstRow = row;
        propertyChangeSupport.firePropertyChange(PROP_FIRST_ROW, oldRow, row);
    }
    
    private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    public JPanel getPanel() {
        return this;
    }

    public void setUrl(String url) {
        try {
            URLSplit split = URLSplit.parse(url);
            Map<String, String> params = URLSplit.parseParams(split.params);

            File f = DataSetURL.getFile(new URL(url), new NullProgressMonitor());
            setFile(f);
            
            if ( params.containsKey("skip") ) {
                setFirstRow( Integer.parseInt(params.get("skip") ) );
            }
            
        } catch (IOException ex) {
            Logger.getLogger(ExcelSpreadsheetDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    public String getUrl() {
        String surl=  this.file.toURI().toString();
        String args="";
        if ( firstRow>0 ) {
            args+= "&firstRow="+firstRow
                     + ( sheetComboBox.isEnabled() ? "&sheet="+sheetComboBox.getSelectedItem() : "" );
        }
        if ( args.length()>0 ) {
            surl+= "?" + args.substring(1);
        }
        return surl;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JFormattedTextField firstRowTextField;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public org.apache.poi.hssf.contrib.view.SViewer sViewer1;
    public javax.swing.JComboBox sheetComboBox;
    // End of variables declaration//GEN-END:variables

}
