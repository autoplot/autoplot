/*
 * AsciiDataSourceEditorPanel.java
 *
 * Created on September 5, 2008, 3:47 PM
 */

package org.virbo.ascii;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.beans.binding.BindingContext;
import javax.swing.JPanel;
import org.das2.util.monitor.NullProgressMonitor;
import org.virbo.datasource.DataSetURL;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URLSplit;

/**
 *
 * @author  jbf
 */
public class AsciiDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    /** Creates new form AsciiDataSourceEditorPanel */
    public AsciiDataSourceEditorPanel() {
        initComponents();
        BindingContext bc= new BindingContext();
        
        bc.addBinding( this, "${skip}", this.skipLinesTextField, "value" );
         
        bc.bind();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fileTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        skipLinesTextField = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();

        fileTextArea.setColumns(20);
        fileTextArea.setFont(new java.awt.Font("Courier", 0, 10)); // NOI18N
        fileTextArea.setRows(5);
        jScrollPane1.setViewportView(fileTextArea);

        jLabel1.setText("skip lines:");

        skipLinesTextField.setText("0");
        skipLinesTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipLinesTextFieldActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(skipLinesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addContainerGap(207, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(skipLinesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void skipLinesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipLinesTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_skipLinesTextFieldActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    setSkip(14);
}//GEN-LAST:event_jButton1ActionPerformed

    protected File file = null;
    public static final String PROP_FILE = "file";

    public File getFile() {
        return file;
    }

    public void setFile(File file) {

        BufferedReader reader = null;
        try {
            File oldFile = this.file;
            this.file = file;
            reader = new BufferedReader(new FileReader(file));
            StringBuffer buf = new StringBuffer();
            int i = 0;
            String s = reader.readLine();
            while (s != null && i < 100) {
                buf.append(s).append("\n");
                s = reader.readLine();
            }

            this.fileTextArea.setText(buf.toString());
            propertyChangeSupport.firePropertyChange(PROP_FILE, oldFile, file);
        } catch (IOException ex) {
            Logger.getLogger(AsciiDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(AsciiDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    protected int skip = 0;
    public static final String PROP_SKIP = "skip";

    public int getSkip() {
        return skip;
    }

    public void setSkip(int skip) {

        int oldSkip = this.skip;
        this.skip = skip;
        propertyChangeSupport.firePropertyChange(PROP_SKIP, oldSkip, skip);
    }
    
    private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    public JPanel getPanel() {
        return this;
    }

    public void setUrl(String url) {
        try {
            URLSplit split = DataSetURL.parse(url);
            Map<String, String> params = DataSetURL.parseParams(split.params);

            File f = DataSetURL.getFile(new URL(url), new NullProgressMonitor());
            setFile(f);
            
            if ( params.containsKey("skip") ) {
                setSkip( Integer.parseInt(params.get("skip") ) );
            }
            
        } catch (IOException ex) {
            Logger.getLogger(AsciiDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    public String getUrl() {
        String surl=  this.file.toURI().toString();
        String args="";
        if ( skip>0 ) {
            args+= "&skip="+skip;
        }
        if ( args.length()>0 ) {
            surl+= "?" + args.substring(1);
        }
        return surl;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea fileTextArea;
    public javax.swing.JButton jButton1;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JFormattedTextField skipLinesTextField;
    // End of variables declaration//GEN-END:variables

}
