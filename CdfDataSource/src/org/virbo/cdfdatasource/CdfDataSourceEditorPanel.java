/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AggregatingDataSourceEditorPanel.java
 *
 * Created on Apr 22, 2009, 8:37:48 AM
 */

package org.virbo.cdfdatasource;

import gsfc.nssdc.cdf.Attribute;
import gsfc.nssdc.cdf.CDF;
import gsfc.nssdc.cdf.CDFException;
import gsfc.nssdc.cdf.Entry;
import gsfc.nssdc.cdf.Variable;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.das2.components.DasProgressPanel;
import org.das2.util.DasExceptionHandler;
import org.virbo.datasource.DataSetSelector;
import org.virbo.datasource.DataSetURL;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URLSplit;

/**
 *
 * @author jbf
 */
public class CdfDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {
    private final static Logger logger= Logger.getLogger( CdfDataSourceEditorPanel.class.getCanonicalName() );

    /** Creates new form AggregatingDataSourceEditorPanel */
    public CdfDataSourceEditorPanel() {
        initComponents();
        parameterList.addListSelectionListener( new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if ( e.getValueIsAdjusting() ) return;
                parameterComboBox.setSelectedItem(parameterList.getSelectedValue());
            }
        } );
        parameterComboBox.addItemListener( new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                parameterList.setSelectedValue( parameterComboBox.getSelectedItem(), true );
            }
        } );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        parameterComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        parameterList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        subsetTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        paramInfo = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Select CDF Parameter:");

        parameterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        parameterList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        parameterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                parameterListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(parameterList);

        jLabel3.setText("subset:");

        subsetTextField.setToolTipText("<html>[0:100]  first 100 elements<br>\n[-100:] last 100 elements<br>\n[::10] every tenth element<br>\n</html>");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 193, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(parameterComboBox, 0, 211, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(subsetTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 263, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(parameterComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(subsetTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(79, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        paramInfo.setText("Parameter");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(paramInfo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(paramInfo)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void parameterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_parameterListValueChanged
        this.parameter= (String) parameterList.getSelectedValue();
        updateMetadata();
    }//GEN-LAST:event_parameterListValueChanged

    private void updateMetadata() {
       String longName= parameterInfo.get(parameter);
       paramInfo.setText( longName );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel paramInfo;
    private javax.swing.JComboBox parameterComboBox;
    private javax.swing.JList parameterList;
    private javax.swing.JTextField subsetTextField;
    // End of variables declaration//GEN-END:variables

    public JPanel getPanel() {
        return this;
    }


    JComponent delegateComponent = null;
    DataSetSelector delegateDataSetSelector=null;
    DataSourceEditorPanel delegateEditorPanel= null;
    URLSplit split;
    /**
     * URI parameters
     */
    Map<String,String> params;

    /**
     * short descriptions of the parameters
     */
    Map<String,String> parameterDescriptions;

    /**
     * long descriptions html formatted metadata about each parameter.
     */
    Map<String,String> parameterInfo;

    String parameter;

    /**
     * can I reuse the slice?  Only if the maxRec doesn't change.
     */
    long subsetMaxRec=-1;

    File cdfFile;

    public void setUrl(String url) {
        split= URLSplit.parse(url);
        params= URLSplit.parseParams(split.params);

        try {

            cdfFile= DataSetURL.getFile( split.resourceUri.toURL(), DasProgressPanel.createFramed("downloading file") );
            
            String fileName= cdfFile.toString();

            logger.fine("opening cdf file "+fileName);
            CDF cdf= CDF.open( fileName, CDF.READONLYoff );

            logger.finest("inspect cdf for plottable parameters");
            parameterDescriptions= CdfUtil.getPlottable( cdf, true, 3, false );
            parameterInfo= CdfUtil.getPlottable( cdf, true, 3, true );
            if ( parameterDescriptions.size()==0 ) {
                throw new IllegalArgumentException("no plottable parameters in cdf file!");
            }

            logger.finest("close cdf");
            cdf.close();

            DefaultListModel model= new DefaultListModel();
            DefaultComboBoxModel cbmodel= new DefaultComboBoxModel();
            for ( String p: parameterDescriptions.keySet() ) {
                model.addElement(p);
                cbmodel.addElement(p);
            }
            parameterList.setModel( model );
            parameterComboBox.setModel(cbmodel);

            String param= params.get("arg_0");
            if ( param!=null ) {
                int i= param.indexOf("[");
                if ( i!=-1 ) {
                    subsetTextField.setText( param.substring(i) );
                    param= param.substring(0,i);
                } else {
                    subsetTextField.setText("");
                }
                parameterList.setSelectedValue(param, true);
            } else {
                parameter= parameterDescriptions.entrySet().iterator().next().getKey();
                parameterList.setSelectedValue( parameter, true );
                subsetTextField.setText("");
            }
            parameter= param;

        } catch (CDFException ex) {
            DasExceptionHandler.handle( ex );
        } catch (IOException ex) {
            Logger.getLogger(CdfDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(CdfDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public String getUrl() {
        String slice= subsetTextField.getText();
        params.put( "arg_0", parameter + ( slice==null ? "" : slice ) );
        split.params= URLSplit.formatParams(params);
        return URLSplit.format(split);
    }

}
