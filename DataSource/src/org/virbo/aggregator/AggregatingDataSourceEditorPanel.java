/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AggregatingDataSourceEditorPanel.java
 *
 * Created on Apr 22, 2009, 8:37:48 AM
 */

package org.virbo.aggregator;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JPanel;
import org.das2.datum.DatumRange;
import org.das2.datum.DatumRangeUtil;
import org.das2.datum.TimeUtil;
import org.das2.fsm.FileStorageModelNew;
import org.das2.util.monitor.NullProgressMonitor;
import org.virbo.datasource.DataSetSelector;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.DataSourceEditorPanelUtil;
import org.virbo.datasource.URISplit;

/**
 *
 * @author jbf
 */
public class AggregatingDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    /** Creates new form AggregatingDataSourceEditorPanel */
    public AggregatingDataSourceEditorPanel() {
        initComponents();
    }


    String uri;
    List<DatumRange> ranges;
    boolean updatingDropLists= false;  // avoid re-entry in droplists.

    public void setDelegateEditorPanel(DataSourceEditorPanel edit) {
        delegateEditorPanel= edit;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        delegatePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        timeRangeTextField = new javax.swing.JTextField();
        outerRangeTextField = new javax.swing.JLabel();
        yearsComboBox = new javax.swing.JComboBox();
        monthsComboBox = new javax.swing.JComboBox();
        daysComboBox = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        delegatePanel.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Aggregation Time Range:");
        jLabel1.setToolTipText("enter the time range to aggregate over.  Data from files within this range will be combined by concatenating over the first dimension.\n");

        timeRangeTextField.setText("jTextField1");

        outerRangeTextField.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        outerRangeTextField.setText("listing to get available time ranges...");

        yearsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "..." }));
        yearsComboBox.setToolTipText("Select from available years");
        yearsComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearsComboBoxItemStateChanged(evt);
            }
        });

        monthsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "...", " " }));
        monthsComboBox.setToolTipText("Select from available months");
        monthsComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monthsComboBoxItemStateChanged(evt);
            }
        });

        daysComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "...", " " }));
        daysComboBox.setToolTipText("Select from available days");

        jButton1.setText("Copy");
        jButton1.setToolTipText("copy the date into the time range field.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(timeRangeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 215, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(222, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(yearsComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(monthsComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(daysComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addContainerGap(320, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(outerRangeTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .add(383, 383, 383))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {daysComboBox, monthsComboBox, yearsComboBox}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(timeRangeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(outerRangeTextField)
                .add(9, 9, 9)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(yearsComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(monthsComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(daysComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(delegatePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(delegatePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String syr= String.valueOf( yearsComboBox.getSelectedItem() ).trim();
        String smn= String.valueOf( monthsComboBox.getSelectedItem() ).trim();
        String sday= String.valueOf( daysComboBox.getSelectedItem() ).trim();
        String range = syr +  " " + smn + " " + sday;
        range= range.trim();
        if ( ( evt.getModifiers() & ActionEvent.SHIFT_MASK ) == ActionEvent.SHIFT_MASK ) {
            DatumRange dr1= DatumRangeUtil.parseTimeRangeValid(range);
            DatumRange dr2= null;
            try {
                dr2= DatumRangeUtil.parseTimeRange(timeRangeTextField.getText());
                dr2= DatumRangeUtil.union( dr1, dr2 );
                timeRangeTextField.setText( dr2.toString() );
            } catch (ParseException ex) {
                timeRangeTextField.setText(range);
            }
        } else {
            timeRangeTextField.setText(range);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void yearsComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearsComboBoxItemStateChanged
        if ( !updatingDropLists ) updateDropLists( false, true );
    }//GEN-LAST:event_yearsComboBoxItemStateChanged

    private void monthsComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monthsComboBoxItemStateChanged
        if ( !updatingDropLists ) updateDropLists( false, false );
    }//GEN-LAST:event_monthsComboBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox daysComboBox;
    private javax.swing.JPanel delegatePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox monthsComboBox;
    private javax.swing.JLabel outerRangeTextField;
    private javax.swing.JTextField timeRangeTextField;
    private javax.swing.JComboBox yearsComboBox;
    // End of variables declaration//GEN-END:variables

    public JPanel getPanel() {
        return this;
    }


    JComponent delegateComponent = null;
    DataSetSelector delegateDataSetSelector=null;
    DataSourceEditorPanel delegateEditorPanel= null;
    URISplit split;
    Map<String,String> params;

    private void setDelegateComponent(JComponent c) {
        if (delegateComponent != null) {
            delegatePanel.remove(delegateComponent);
        }
        delegateComponent = c;
        delegatePanel.add(c, BorderLayout.CENTER);
        delegatePanel.validate();
    }

    private void updateTimeRanges() {
        DatumRange dr= null;
        try {
            FileStorageModelNew fsm = AggregatingDataSourceFactory.getFileStorageModel(uri);
            String[] names= fsm.getNamesFor( null, new NullProgressMonitor() );
            ranges= new ArrayList(names.length);
            for ( int i=0; i<names.length; i++ ) {
                ranges.add(i,fsm.getRangeFor(names[i]));
                if ( dr==null ) {
                    dr= ranges.get(i);
                } else {
                    dr= DatumRangeUtil.union(dr, ranges.get(i) );
                }
            }
        } catch (IOException ex) {
            outerRangeTextField.setText( ex.toString() );
            return;
        }
        outerRangeTextField.setText( "found files for " +dr.toString() );
    }

    private void updateDropLists( boolean updateYear, boolean updateMonth ) {

        List possible;
        List<DatumRange> result;
        ComboBoxModel model;

        updatingDropLists= true;
        
        DatumRange selectedRange= null;
        try {
            selectedRange = DatumRangeUtil.parseTimeRange(timeRangeTextField.getText());
        } catch (ParseException ex) {
            Logger.getLogger(AggregatingDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        if ( updateYear ) {
            // years
            possible= DatumRangeUtil.generateList( DatumRangeUtil.parseTimeRangeValid("1800-2200"),
                    DatumRangeUtil.parseTimeRangeValid("1800" ) );
            result= DatumRangeUtil.intersection( possible, ranges, false );

            String[] yrLabels= new String[result.size()+1];
            yrLabels[0]="";
            int isel= result.size()==1 ? 1 : 0;
            for ( int i=0; i<result.size(); i++ ) {
                yrLabels[i+1]= result.get(i).toString();
                if ( selectedRange!=null && result.get(i).intersects(selectedRange) ) isel= i+1;
            }
            model = new DefaultComboBoxModel(yrLabels);
            yearsComboBox.setModel(model);
            yearsComboBox.setSelectedIndex(isel);
        }

        String syr=  String.valueOf( yearsComboBox.getSelectedItem() ).trim();
        if ( updateMonth ) {
            if ( syr.length()>0 ) {
                possible= DatumRangeUtil.generateList( DatumRangeUtil.parseTimeRangeValid(syr),
                    DatumRangeUtil.parseTimeRangeValid( syr + " jan" ) );
                result= DatumRangeUtil.intersection( possible, ranges, false );
                String[] mnLabels= new String[result.size()+1];
                mnLabels[0]="";
                int isel= result.size()==1 ? 1 : 0;
                for ( int i=0; i<result.size(); i++ ) {
                    mnLabels[i+1]= result.get(i).toString().replace( syr, "" ).trim();
                    if ( selectedRange!=null && result.get(i).intersects(selectedRange)  && selectedRange.width().le( result.get(i).width() )) isel= i+1;
                }
                model = new DefaultComboBoxModel(mnLabels);
                monthsComboBox.setModel(model);
                monthsComboBox.setSelectedIndex(isel);
            } else {
                monthsComboBox.setModel( new DefaultComboBoxModel( new String[] { "" } ) );
            }
        }

        String smon=  String.valueOf( monthsComboBox.getSelectedItem() ).trim();
        if ( syr.length()>0 && smon.length()>0 ) {
            possible= DatumRangeUtil.generateList( DatumRangeUtil.parseTimeRangeValid(syr+" "+smon),
                DatumRangeUtil.parseTimeRangeValid( syr + " " + smon + " 1" ) );
            result= DatumRangeUtil.intersection( possible, ranges, false );
            String[] dayLabels= new String[result.size()+1];
            dayLabels[0]= "";
            int isel= result.size()==1 ? 1 : 0;
            for ( int i=0; i<result.size(); i++ ) {
                dayLabels[i+1]= String.valueOf( TimeUtil.toTimeStruct(result.get(i).min()).day );
                if ( selectedRange!=null && result.get(i).intersects(selectedRange) && selectedRange.width().le( result.get(i).width() ) ) isel= i+1;
            }
            model = new DefaultComboBoxModel(dayLabels);
            daysComboBox.setModel(model);
            daysComboBox.setSelectedIndex(isel);
        } else {
            daysComboBox.setModel( new DefaultComboBoxModel( new String[] { "" } ) );
        }

        updatingDropLists= false;
    }

    public void setURI(String url) {
        split= URISplit.parse(url);
        params= URISplit.parseParams(split.params);
        this.uri= url;
        try {

            timeRangeTextField.setText( params.get("timerange") );

            String delegateUrl = AggregatingDataSourceFactory.getDelegateDataSourceFactoryUrl(url);
            if ( delegateEditorPanel==null ) {
                delegateEditorPanel = DataSourceEditorPanelUtil.getDataSourceEditorPanel(new URI(delegateUrl));
            }
            if ( delegateEditorPanel==null ) {
                JPanel delegateP= new JPanel(new BorderLayout());
                delegateDataSetSelector= new DataSetSelector();
                delegateDataSetSelector.setValue(delegateUrl);
                delegateP.add(delegateDataSetSelector,BorderLayout.SOUTH );
                setDelegateComponent(delegateP);
            } else {
                delegateEditorPanel.setURI(delegateUrl);
                setDelegateComponent(delegateEditorPanel.getPanel());
            }

        } catch (URISyntaxException ex) {
            Logger.getLogger(AggregatingDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AggregatingDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(AggregatingDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        Runnable run= new Runnable() {
            public void run() {
                updateTimeRanges();
                updateDropLists(true,true);
            }
        };

        new Thread( run ).start();

    }

    public String getURI() {
        String delegateUrl;
        if ( delegateEditorPanel!=null ) {
            delegateUrl= delegateEditorPanel.getURI();
        } else {
            delegateUrl= delegateDataSetSelector.getValue();
        }
        URISplit dsplit= URISplit.parse(delegateUrl);
        Map<String,String> allParams= new LinkedHashMap<String,String>();
        allParams.putAll( params );
        allParams.putAll( URISplit.parseParams(dsplit.params) );
        allParams.put( "timerange", timeRangeTextField.getText() );
        split.params= URISplit.formatParams(allParams);
        return URISplit.format(split);
    }

}
