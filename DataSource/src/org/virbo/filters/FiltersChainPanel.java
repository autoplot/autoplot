/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.virbo.filters;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.ParseException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.ConsoleHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.SwingUtilities;
import org.das2.util.LoggerManager;
import org.das2.util.monitor.NullProgressMonitor;
import org.virbo.dataset.DataSetOps;
import org.virbo.dataset.MutablePropertyDataSet;
import org.virbo.dataset.QDataSet;
import org.virbo.dsops.Ops;

/**
 * Aggregate a number of sub panels to one long filter chain.  For example,
 * |slice1(0)|smooth(5) would add two of the FilterEditorPanel to control each
 * filter.  Additionally, this adds and removes filters from the chain.
 * 
 * @author jbf
 */
public class FiltersChainPanel extends javax.swing.JPanel implements FilterEditorPanel {
    
    private QDataSet inputDs;

    private static final Logger logger= LoggerManager.getLogger("apdss.filters");
    private static final String CLASS_NAME = FiltersChainPanel.class.getName();
    
    /**
     * Creates new form FiltersChainPanel
     */
    public FiltersChainPanel() {
        logger.entering( CLASS_NAME, "<init>" );
        initComponents();
        setLayout( new BoxLayout( this, BoxLayout.Y_AXIS ));
    }

    List<FilterEditorPanel> editors= new LinkedList();

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * this should return a delegate editor for the given filter.  This component
     * will be configured as specified in f.
     * @param f the filter, which may or may not start with a pipe.
     * @return the filter.
     */
    private FilterEditorPanel getEditorFor(String f) {
        logger.entering( CLASS_NAME, "getEditorFor", f );
        while ( f.startsWith("|") ) f= f.substring(1);
        FilterEditorPanel result;
        if ( f.matches("slice\\d\\(.*\\)") ) {
            result= new SliceFilterEditorPanel();
        } else if ( f.matches("collapse\\d\\(\\)") ) {
            result= new CollapseFilterEditorPanel();
        } else if ( f.matches("smooth\\(\\d+\\)") ) { // TODO: FilterEditorPanel might choose to accept a filter.
            result= new SmoothFilterEditorPanel();
        } else {
            throw new IllegalArgumentException("filter editor not found.");
        }
        result.setFilter("|"+f);
        return result;
    }
    
    @Override
    public String getFilter() {
        logger.entering( CLASS_NAME, "getFilter" );
        StringBuilder b= new StringBuilder();
        for ( FilterEditorPanel p: editors ) {
            b.append(p.getFilter());
        }
        return b.toString();
    }

    @Override
    public void setFilter(String filter) {
        logger.entering( CLASS_NAME, "setFilter", filter );
        editors.clear();
        this.removeAll();
        String[] ss= filter.split("\\|");
        
        for (String s : ss) {
            s= s.trim();
            if ( s.length()>0 ) {
                FilterEditorPanel p = getEditorFor(s);
                editors.add(p);
                this.add(p.getPanel());
                this.add(new JSeparator());
            }
        }
        this.revalidate();
        
    }

    /**
     * 
     */
    private void updateSoon() {
        logger.entering( CLASS_NAME, "updateSoon" );
        Runnable run= new Runnable() {
            @Override
            public void run() {
                System.err.println( "1: " + getFilter() + "  " + editors.get(0).getPanel().getName() );
                
                setFilter( getFilter() );
                System.err.println("here1");
                setInput( inputDs );
                System.err.println("here2");
            }
        };
        SwingUtilities.invokeLater(run);
    }
    
    /**
     * the filter must be set before this is called.  This will set droplist labels, etc.
     * @param ds 
     */
    @Override
    public void setInput( QDataSet ds) {
        logger.entering( CLASS_NAME, "setInput", ds );
        this.inputDs= ds;
        
        String filter= getFilter();
        logger.log(Level.FINE, "filter: {0}", filter);
        
        String[] ss= filter.split("\\|");
        int i=0;
        for (String s : ss) {
            s= s.trim();
            if ( s.length()>0 ) {
                FilterEditorPanel p = editors.get(i);
                if ( ds!=null ) {
                    p.setInput(ds);
                    try {
                        ds= DataSetOps.sprocess( "|"+s, ds, new NullProgressMonitor() );
                    } catch ( Exception ex ) {
                        ds= null;
                    }
                    PropertyChangeListener[] pcls= p.getPanel().getPropertyChangeListeners();
                    for ( PropertyChangeListener pcl: pcls ) {
                        p.getPanel().removePropertyChangeListener( pcl );
                    }
                    p.getPanel().addPropertyChangeListener("filter",new PropertyChangeListener() {
                        @Override
                        public void propertyChange(PropertyChangeEvent evt) {
                            updateSoon();
                        }
                    });
                }
                i=i+1;
            }
        }
        this.revalidate();        
    }

    @Override
    public JPanel getPanel() {
        logger.entering( CLASS_NAME, "getPanel" );        
        return this;
    }
    
    private static QDataSet getDataSet() {
        try {
            MutablePropertyDataSet ds= (MutablePropertyDataSet) Ops.ripples(300,30,20);
            MutablePropertyDataSet dds;
            dds= (MutablePropertyDataSet) Ops.timegen("2000-01-01T00:00", "60s", 300 );
            dds.putProperty( QDataSet.NAME, "Epoch" );
            ds.putProperty( QDataSet.DEPEND_0, dds );
            dds= (MutablePropertyDataSet) Ops.findgen(30);
            dds.putProperty( QDataSet.NAME, "index30" );
            ds.putProperty( QDataSet.DEPEND_1, dds );
            dds= (MutablePropertyDataSet) Ops.findgen(20);
            dds.putProperty( QDataSet.NAME, "index20" );
            ds.putProperty( QDataSet.DEPEND_2, dds );
            return ds;
        } catch (ParseException ex) {
            throw new RuntimeException(ex);
        }
    }
    
    public static void main( String[] args ) throws Exception {
        logger.setLevel(Level.ALL);
        Handler h= new ConsoleHandler();
        h.setLevel(Level.ALL);
        
        logger.addHandler( h );
        
        FiltersChainPanel ff= new FiltersChainPanel();

        QDataSet ds= getDataSet();
        ff.setFilter("|slice0(2)|collapse1()|smooth(51)"); //butterworth(2,500,550,True)");
        ff.setInput(ds);
        JOptionPane.showMessageDialog( null, ff );
        System.err.println(ff.getFilter());
    }
}
