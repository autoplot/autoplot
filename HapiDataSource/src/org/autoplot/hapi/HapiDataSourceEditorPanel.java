
package org.autoplot.hapi;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Window;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.ParseException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.das2.datum.Datum;
import org.das2.datum.DatumRange;
import org.das2.datum.DatumRangeUtil;
import org.das2.datum.TimeUtil;
import org.das2.datum.Units;
import org.das2.util.TickleTimer;
import org.das2.util.monitor.ProgressMonitor;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.virbo.datasource.DataSetSelector;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.TimeRangeTool;
import org.virbo.datasource.URISplit;
import org.virbo.datasource.WindowManager;

/**
 *
 * @author jbf
 */
public class HapiDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    List<String> ids;
    
    URL defaultServer;
    
    private DatumRange getRange( JSONObject info ) {
        try {
            if ( info.has("firstDate") && info.has("lastDate") ) {
                String firstDate= info.getString("firstDate");
                String lastDate= info.getString("lastDate");
                if ( firstDate!=null && lastDate!=null ) {
                    return new DatumRange( Units.us2000.parse(firstDate), Units.us2000.parse(lastDate) );
                }
            }
        } catch ( JSONException ex ) {
            ex.printStackTrace();
        } catch ( ParseException ex ) {
            ex.printStackTrace();
        }
        return null;
    }
    
    protected final static Logger logger= Logger.getLogger("apdss.hapi");
    
    private String currentParameters= null;
    private URL currentServer= null;
    private String currentId= null;
    private String currentExtra=null;

    /**
     * Creates new form HapiDataSourceEditorPanel
     */
    public HapiDataSourceEditorPanel() {
        try {
            List<String> servers= HapiServer.getKnownServers();
            this.defaultServer = new URL(servers.get(servers.size()-1));
        } catch ( MalformedURLException ex ) {
            throw new RuntimeException(ex);
        }
        initComponents();
        jScrollPane4.getVerticalScrollBar().setUnitIncrement( parametersPanel.getFont().getSize() );

        parametersPanel.setLayout( new BoxLayout( parametersPanel, BoxLayout.Y_AXIS ) );

        serversComboBox.setModel( new DefaultComboBoxModel<>( HapiServer.listHapiServersArray() ));
        idsList2.addListSelectionListener( new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if ( !e.getValueIsAdjusting() ) {
                    if ( idsList2.getSelectedValue()!=null && !idsList2.getSelectedValue().equals(currentId) ) {
                        currentParameters= null;
                    }
                    currentId= idsList2.getSelectedValue();
                    resetVariableTimer.tickle();
                }
            }
        } );
    }

    TickleTimer resetVariableTimer= new TickleTimer( 500, new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            try {
                resetVariable( new URL( (String)serversComboBox.getSelectedItem() ), idsList2.getSelectedValue() );  
            } catch (MalformedURLException ex) {
                JOptionPane.showMessageDialog( parametersPanel, ex.toString() );
            }
        }
    });
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        serversComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        timeRangeTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        idsList2 = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        parametersPanel = new javax.swing.JPanel();
        clearAllB = new javax.swing.JButton();
        setAllB = new javax.swing.JButton();
        extraInfoButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("HAPI Server:");

        serversComboBox.setEditable(true);
        serversComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "http://tsds.org/get/IMAGE/PT1M/hapi", " " }));
        serversComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serversComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Time Range: ");

        timeRangeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeRangeTextFieldActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autoplot/hapi/calendar.png"))); // NOI18N
        jButton1.setToolTipText("Time Range Tool");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSplitPane1.setDividerLocation(210);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        idsList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(idsList2);

        jSplitPane1.setLeftComponent(jScrollPane2);

        javax.swing.GroupLayout parametersPanelLayout = new javax.swing.GroupLayout(parametersPanel);
        parametersPanel.setLayout(parametersPanelLayout);
        parametersPanelLayout.setHorizontalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );
        parametersPanelLayout.setVerticalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 195, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(parametersPanel);

        clearAllB.setText("Clear All");
        clearAllB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllBActionPerformed(evt);
            }
        });

        setAllB.setText("Set All");
        setAllB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAllBActionPerformed(evt);
            }
        });

        extraInfoButton.setText("Extra Info");
        extraInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(extraInfoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearAllB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setAllB))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearAllB)
                    .addComponent(setAllB)
                    .addComponent(extraInfoButton)))
        );

        jSplitPane1.setRightComponent(jPanel3);

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serversComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeRangeTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(serversComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(timeRangeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(jButton1)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void timeRangeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeRangeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeRangeTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        org.das2.util.LoggerManager.logGuiEvent(evt);
        TimeRangeTool tt= new TimeRangeTool();
        JTextField tf= timeRangeTextField;
        tt.setSelectedRange(tf.getText());
        int r= JOptionPane.showConfirmDialog( this, tt, "Select Time Range", JOptionPane.OK_CANCEL_OPTION );
        if ( r==JOptionPane.OK_OPTION) {
            tf.setText(tt.getSelectedRange());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void serversComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serversComboBoxActionPerformed
        try {
            resetServer( new URL( (String)serversComboBox.getSelectedItem() ) );
        } catch (MalformedURLException ex) {
            logger.log(Level.SEVERE, null, ex);
        } catch (IOException | JSONException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_serversComboBoxActionPerformed

    private void clearAllBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllBActionPerformed
        boolean first= !currentServer.toString().contains("http://cdaweb.gsfc.nasa.gov/registry/hdp/hapi");
        for ( Component c: parametersPanel.getComponents() ) {
            if ( c instanceof JCheckBox ) {
                if ( first ) {
                    ((JCheckBox)c).setSelected(true);
                    first= false;
                } else {
                    ((JCheckBox)c).setSelected(false);
                }
            }
        }
    }//GEN-LAST:event_clearAllBActionPerformed

    private void setAllBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAllBActionPerformed
        for ( Component c: parametersPanel.getComponents() ) {
            if ( c instanceof JCheckBox ) {
                ((JCheckBox)c).setSelected(true);
            }
        }
    }//GEN-LAST:event_setAllBActionPerformed

    private void extraInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraInfoButtonActionPerformed
        JLabel l= new JLabel( currentExtra );
        
        JScrollPane p= new JScrollPane(l);
        //p.setPreferredSize( new Dimension( 800,600 ) );
        p.setMaximumSize( new Dimension( 800,600 ) );
        JOptionPane.showMessageDialog( this, p, "Extra Info", JOptionPane.INFORMATION_MESSAGE );
    }//GEN-LAST:event_extraInfoButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearAllB;
    private javax.swing.JButton extraInfoButton;
    private javax.swing.JList<String> idsList2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JComboBox<String> serversComboBox;
    private javax.swing.JButton setAllB;
    private javax.swing.JTextField timeRangeTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean reject(String uri) throws Exception {
        return false;
    }

    @Override
    public boolean prepare(String uri, Window parent, ProgressMonitor mon) throws Exception {
        URISplit split = URISplit.parse(uri);
        if ( split.file==null || split.file.equals("file:///") ) { // use TSDS's one by default.
            split.file= defaultServer.toString();
        }  
        try {
            ids= HapiServer.getCatalog(new URL(split.file));
        } catch ( IOException ex ) {
            
        }
        return true;
    }
    
    /** make the currentParameters checklist reflect currentParameters spec.
     * 
     * @param parameters comma-delineated list of currentParameters.
     */
    private void setParameters( String parameters ) {
        for ( Component c: parametersPanel.getComponents() ) {
            if ( c instanceof JCheckBox ) {
                ((JCheckBox)c).setSelected(false);
            }
        }
        if ( parameters.length()>0 ) {
            String[] ss= parameters.split(",");
            for ( Component c: parametersPanel.getComponents() ) {
                if ( c instanceof JCheckBox ) {
                    String name= ((JCheckBox)c).getName();
                    ((JCheckBox)c).setSelected(false);
                    for ( int i=0; i<ss.length; i++ ) {
                        if ( ss[i].equals(name) ) {
                            ((JCheckBox)c).setSelected(true);
                        }
                    }
                }
            }
        } else {
            for ( Component c: parametersPanel.getComponents() ) {
                if ( c instanceof JCheckBox ) {
                    ((JCheckBox)c).setSelected(true);
                }
            }
        }
    }

    private String getParameters() {
        StringBuilder b= new StringBuilder();
        boolean areAllTrue= true;
        for ( Component c: parametersPanel.getComponents() ) {
            if ( c instanceof JCheckBox ) {
                if ( ((JCheckBox)c).isSelected() ) {
                    b.append(",").append(c.getName());
                } else {
                    areAllTrue= false;
                }
            }
        }
        if ( areAllTrue ) {
            return "";
        } else {
            return b.substring(1); // remove first comma.
        }
    }
    
    @Override
    public void setURI(String uri) {
        URISplit split = URISplit.parse(uri);        
        if ( split.file==null || split.file.equals("file:///") ) { // use TSDS's one by default.
            split.file= defaultServer.toString();
        }     
        serversComboBox.setSelectedItem( split.file );
        Map<String,String> params= URISplit.parseParams( split.params );
        
        String id= params.get("id");
        if ( id!=null ) {
            try {
                id= URLDecoder.decode(id,"UTF-8");
                idsList2.setSelectedValue( id, true );
            } catch (UnsupportedEncodingException ex) {
                throw new RuntimeException(ex);
            }
        }
        String timerange= params.get("timerange");
        if ( timerange!=null ) {
            timeRangeTextField.setText(timerange);
        }
        String parameters= params.get("parameters");
        if ( parameters!=null ) {
            this.currentParameters= parameters;
            setParameters(this.currentParameters);
        }
        
    }

    @Override
    public void markProblems(List<String> problems) {
    }

    @Override
    public JPanel getPanel() {
        return this;
    }

    @Override
    public String getURI() {
        String parameters= getParameters();
        String id= idsList2.getSelectedValue();
        if ( id==null ) {
            id= "";
        } else {           
            try {
                id= URLEncoder.encode(id,"UTF-8");
            } catch (UnsupportedEncodingException ex) {
                throw new RuntimeException(ex);
            }
        }
        if ( parameters.length()>0 ) {
            return "vap+hapi:" + serversComboBox.getSelectedItem().toString() + "?id=" + id + "&timerange="+timeRangeTextField.getText().replaceAll(" ","+") + "&parameters="+parameters;
        } else {
            return "vap+hapi:" + serversComboBox.getSelectedItem().toString() + "?id=" + id + "&timerange="+timeRangeTextField.getText().replaceAll(" ","+");
        }
    }
    
    private void resetServer( URL server ) throws IOException, JSONException {
        try {
            List<String> ids= HapiServer.getCatalog(server);
            DefaultListModel model= new DefaultListModel();
            for ( String id: ids ) model.addElement( id );
            idsList2.setModel( model );
            int maxLen=0;
            for ( String s: ids ) {
                maxLen= Math.max( s.length(), maxLen );
            }
            maxLen= maxLen*8; // pixels per character
            maxLen= Math.min( maxLen,600 );
            maxLen= Math.max( maxLen,300 );
            jSplitPane1.setDividerLocation(maxLen);
            
            if ( !server.equals(currentServer) ) {
                idsList2.setSelectedIndex(0);
                currentServer= server;
                idsList2.ensureIndexIsVisible(0);
            } else {
                int i= idsList2.getSelectedIndex();
                idsList2.ensureIndexIsVisible( i==-1 ? 0 : i );
            }
        } catch ( IOException ex ) {
            DataSetSelector.showUserExceptionDialog( this, "Error when connecting to server", "I/O Exception", ex, JOptionPane.WARNING_MESSAGE );
        }
    }
    
    private String getHtmlFor( Object o ) throws JSONException {
        StringBuilder s= new StringBuilder();
        if ( o instanceof JSONArray ) {
            JSONArray joa= (JSONArray)o;
            s.append("<ul>");
            for ( int i=0; i<joa.length(); i++ ) {
                s.append("<li>").append(getHtmlFor(joa.get(i))).append("<li>");
            }
            s.append("</ul>");
        } else if ( o instanceof JSONObject ) {
            JSONObject jo= (JSONObject)o;
            s.append("<table>");
            Iterator iter= jo.keys();
            String k;
            for ( ; iter.hasNext(); ) {
                k=iter.next().toString();
                Object v= jo.get(k);
                String sv= (getHtmlFor(v));
                s.append("<tr valign=top><td>").append(k).append("</td><td>").append(sv).append("</td></tr>");
            }
            s.append("</table>");
        } else {
            s.append(o.toString());
        }
        return s.toString();
    }
    
    private void resetVariable( URL server, String id ) {
        try {
            JSONObject info= HapiServer.getInfo( server, id );
            JSONArray parameters= info.getJSONArray("parameters");
            
            StringBuilder extra= new StringBuilder();
            extra.append("<html><table>");
            Iterator iter= info.keys();
            String k;
            for ( ; iter.hasNext(); ) {
                k=iter.next().toString();
                if ( !k.equals("parameters") ) {
                    Object v= info.get(k);
                    extra.append("<tr valign=top><td>").append(k).append("</td><td>");
                    String s= getHtmlFor(v);
                    if ( s.length()>300 ) {
                        extra.append("<i>(").append(v.toString().length()).append(" characters)</i>");
                        //extra.append( s ) ; //v.toString() );
                    } else {
                        extra.append( s );
                    }
                    extra.append("</td></tr>");
                }
            }
            extra.append("</table></html>");
            currentExtra= extra.toString();
            parametersPanel.removeAll();
            for ( int i=0; i<parameters.length(); i++ ) {
                JSONObject parameter= parameters.getJSONObject(i);
//                if ( parameter.has("size") ) {
//                    Object o= parameter.get("size");
//                    if ( !( o instanceof JSONArray ) ) {
//                        logger.log(Level.WARNING, "size is not an array of ints: {0}", o);
//                        continue;
//                    }
//                    JSONArray aa= parameter.getJSONArray("size");
//                    logger.log(Level.WARNING, "size is array is not supported in Autoplot.");
//                    continue;
//                }
                JCheckBox cb= new JCheckBox(parameter.getString("name"));
                cb.setName(parameter.getString("name"));
                cb.setSelected(true);
                parametersPanel.add( cb );
            }
            parametersPanel.revalidate();
            parametersPanel.repaint();
            if ( currentParameters!=null ) {
                setParameters(currentParameters);
            }
            DatumRange range= getRange(info);
            if ( range==null ) {
                jLabel3.setText( "range is not provided" );
            } else {
                jLabel3.setText( range.toString() );
                Datum end= TimeUtil.prevMidnight(range.max());
                DatumRange landing= new DatumRange( end.subtract( 1, Units.days ), end );
                String currentTimeRange= timeRangeTextField.getText().trim();
                if ( currentTimeRange.length()==0 ) {
                    timeRangeTextField.setText( landing.toString() );
                } else {
                    try {
                        DatumRange current = DatumRangeUtil.parseTimeRange(currentTimeRange);
                        if ( !current.intersects(range) ) {
                            timeRangeTextField.setText( landing.toString() );
                        }
                    } catch (ParseException ex) {
                        // do nothing.
                    }
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(HapiDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(HapiDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
                
    }
}
