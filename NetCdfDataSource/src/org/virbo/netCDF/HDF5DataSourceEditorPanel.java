/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.virbo.netCDF;

import java.awt.Window;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.das2.util.DasExceptionHandler;
import org.das2.util.LoggerManager;
import org.das2.util.filesystem.FileSystem;
import org.das2.util.monitor.NullProgressMonitor;
import org.das2.util.monitor.ProgressMonitor;
import org.virbo.dataset.QDataSet;
import org.virbo.datasource.CompletionContext;
import org.virbo.datasource.DataSetURI;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URISplit;
import static org.virbo.netCDF.NetCDFDataSourceFactory.checkMatlab;
import ucar.ma2.DataType;
import ucar.nc2.Dimension;
import ucar.nc2.NetcdfFile;
import ucar.nc2.Variable;
import ucar.nc2.dataset.NetcdfDataset;

/**
 * Editor panel for HDF5 files.
 * @author faden@cottagesystems.com
 */
public class HDF5DataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    /**
     * Creates new form HDF5DataSourceEditorPanel
     */
    public HDF5DataSourceEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        selectVariableLabel = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        parameterTree = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        parameterInfoLabel = new javax.swing.JLabel();

        selectVariableLabel.setText("Select paramater:");

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.5);

        jSplitPane1.setResizeWeight(0.5);

        parameterTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                parameterTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(parameterTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jLabel1.setText("More to come...");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jSplitPane1.setRightComponent(jLabel1);

        jSplitPane2.setTopComponent(jSplitPane1);

        parameterInfoLabel.setText("jLabel1");
        jSplitPane2.setRightComponent(parameterInfoLabel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(selectVariableLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(selectVariableLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void parameterTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_parameterTreeValueChanged
        TreePath tp= evt.getPath();
        parameter= String.valueOf(tp.getPathComponent(1));
        String longName= parameters.get(parameter);
        parameterInfoLabel.setText( longName );
    }//GEN-LAST:event_parameterTreeValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel parameterInfoLabel;
    private javax.swing.JTree parameterTree;
    private javax.swing.JLabel selectVariableLabel;
    // End of variables declaration//GEN-END:variables

    private static final Logger logger= LoggerManager.getLogger("apdss.hdf5");
    
    URISplit split;
    
    /**
     * URI parameters, like arg_0.
     */
    Map<String,String> params;

    /**
     * parameter name to short descriptions of the parameter.
     */
    Map<String,String> parameters= new LinkedHashMap();
    
    /**
     * the parameter within the HDF5 file to be plotted.
     */
    String parameter;

    @Override
    public boolean reject(String uri) throws Exception {
        split = URISplit.parse(uri); 

        if ( split.resourceUri.toURL()==null ) {
            return true;
        }
        
        FileSystem fs = FileSystem.create( DataSetURI.getWebURL( DataSetURI.toUri(split.path) ).toURI() );
        if ( fs.isDirectory( split.file.substring(split.path.length()) ) ) {
            return true;
        }
        return false;
    }

    @Override
    public boolean prepare(String uri, Window parent, ProgressMonitor mon) throws Exception {
        split= URISplit.parse(uri);

        File cdfFile= DataSetURI.getFile( split.resourceUri, mon );
        DataSetURI.checkLength(cdfFile);

        return true;
    }
    
    private void fillTree( JTree parameterTree, Map<String,String> mm, String param, String slice1 ) {

        DefaultMutableTreeNode root= new DefaultMutableTreeNode("");

        List<TreePath> expand=new ArrayList(mm.size());
        
        TreePath selection=null;
        for ( Map.Entry<String,String> e: mm.entrySet() ) {

           try {
                DefaultMutableTreeNode node=  new DefaultMutableTreeNode( e.getKey() );
                root.add( node );
                if ( e.getKey().equals(param) ) {
                    selection= new TreePath( new Object[] { root, node } );
                }
            } catch ( Exception t ) {
                logger.log(Level.WARNING,t.getMessage(),t);

            }
        }

        DefaultTreeModel tm= new DefaultTreeModel( root );

        parameterTree.setRootVisible(false);
        parameterTree.setModel(tm);

        if ( selection!=null ) {
            parameterTree.setSelectionPath(selection);
            parameterTree.scrollPathToVisible(selection);
        }
        
        for ( TreePath tp: expand ) {
            parameterTree.expandPath(tp);
        }

    }
    

    @Override
    public void setURI(String uri) {
        
        split= URISplit.parse(uri);
        params= URISplit.parseParams(split.params);

        try {

            File cdfFile = DataSetURI.getFile( split.resourceUri.toURL(), new NullProgressMonitor() );
            
            String fileName= cdfFile.toString();

            logger.log(Level.FINE, "opening cdf file {0}", fileName);
            
            String resource= fileName;
            
            checkMatlab( resource );
            NetcdfFile f= NetcdfFile.open( resource );
            NetcdfDataset dataset= new NetcdfDataset( f );
            
            List<Variable> vars= (List<Variable>)dataset.getVariables();
            dataset.close();
            
            for ( int j=0; j<vars.size();j++ ) {
                Variable v= vars.get(j);

                if ( v.getDimensions().isEmpty() ) continue;
                boolean isFormattedTime= v.getDataType()==DataType.CHAR && v.getRank()==2 && v.getShape(1)>=14 && v.getShape(1)<=30;
                if ( !isFormattedTime && !v.getDataType().isNumeric() ) continue;
                StringBuilder description= new StringBuilder( "<html><b>"+v.getName()+"[" );
                for ( int k=0; k<v.getDimensions().size(); k++ ) {
                    Dimension d= v.getDimension(k);
                    if ( k>0 ) description.append(",");
                    if ( !d.getName().equals(v.getName()) ) {
                        description.append(d.getName()).append("=");
                    }
                    description.append(d.getLength());
                }
                description.append("]");
                
                parameters.put( v.getName(), description.toString() );

            }

            String label= "Select HDF5 Variable (%d parameters):";
            
            int numData= vars.size();

            this.selectVariableLabel.setText( String.format( label, numData ) );

            String param= params.get("arg_0");
            String subset= null;
            if ( param!=null ) {
                int i= param.indexOf("[");
                if ( i!=-1 ) {
                    subset= param.substring(i);
                    param= param.substring(0,i);
                }
            }
            
            String slice1= params.remove("slice1");

            fillTree( this.parameterTree, parameters, param, slice1 );
            
            logger.finest("close hdf");

            DefaultComboBoxModel cbmodel= new DefaultComboBoxModel();
            for ( String p: params.keySet() ) {
                cbmodel.addElement(p);
            }

            if ( param==null ) {
                if ( !params.isEmpty() ) {
                    parameter= params.entrySet().iterator().next().getKey();
                    param= parameter;
                    parameterInfoLabel.setText("");
                } else {
                    parameterInfoLabel.setText("(no plottable parameters)");
                }                
            }
            
            if ( parameter!=null ) {
                parameter= parameter.replaceAll("%3D", "=");
            }
            
        } catch (IOException ex) {
            DasExceptionHandler.handle( ex );
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        } catch (IllegalArgumentException ex) {
            DasExceptionHandler.handle( ex );
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            DasExceptionHandler.handle( ex );
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }

    }

    @Override
    public void markProblems(List<String> problems) {
        System.err.println(problems);
    }

    @Override
    public JPanel getPanel() {
        return this;
    }

    @Override
    public String getURI() {
        params.put( "arg_0", parameter );
        split.params= URISplit.formatParams(params);
        return URISplit.format(split);
    }
    
    public static void main( String[] args ) throws Exception {
        //String uri= "/home/jbf/ct/autoplot/data/hdf/20020908_CRRES_FluxAssimOut.h5";
        String uri= "/home/jbf/ct/autoplot/data/hdf/brian/FU1_ZEP_Counts_v1-5681_20110301_v1.0.0.h5";
        DataSourceEditorPanel ep= new HDF5DataSourceEditorPanel();
        
        if ( !ep.reject(uri) ) {
            ep.prepare( uri, null, new NullProgressMonitor() );
            ep.setURI( uri );
            if ( JOptionPane.showConfirmDialog( null, ep )==JOptionPane.OK_OPTION ) {
                System.err.println( ep.getURI() );
            }
            
        }
        
    }
}
